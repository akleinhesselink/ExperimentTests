Gpars
plants
W
plants[18,]
Gpars$nb
# call all scripts for removal experiment analysis
rm(list=ls(all=TRUE))
graphics.off();
root=ifelse(.Platform$OS.type=="windows","c:/Repos","~/repos"); # modify as needed
setwd(paste(root,"/ExperimentTests/removals/",sep="")); # modify as needed
###
### 1. get treatment trends #################################
###
source("treatment_trends_removals.r")
###
### 2. fit vital rate regressions ###########################
###
# table to store Treatment effects
trtTests <- data.frame("species"="c","stage"="c","effect"=1,"CI.02.5"=1,"CI.97.5"=1,stringsAsFactors = F)
# fit growth models (takes < 5 mins)
library(INLA)
setwd("growth")
source("write_params.r") # get function to format and output parameters
for(iSpp in c("ARTR","HECO","POSE","PSSP")){
source(paste0(iSpp,"growth.r"))
# write parameters
formatGrowthPars(m0,paste0(iSpp,"_growth_noTrt.csv"))
formatGrowthPars(m1,paste0(iSpp,"_growth_Trt.csv"))
# save treatment test
irow <- dim(trtTests)[1]
trtTests[irow+1,] <- NA
trtTests[irow+1,1:2] <- c(iSpp,"growth")
tmp <- grep("Treatment",row.names(m1$summary.fixed))
trtTests[irow+1,3:5] <- m1$summary.fixed[tmp,c("mean","0.025quant","0.975quant")]
}
setwd("..")
# fit survival models (takes ~ 10 minutes)
library(INLA)
setwd("survival")
source("write_params.r") # get function to format and output parameters
for(iSpp in c("ARTR","HECO","POSE","PSSP")){
source(paste0(iSpp,"survival.r"))
# write parameters
formatSurvPars(m0,paste0(iSpp,"_surv_noTrt.csv"))
formatSurvPars(m1,paste0(iSpp,"_surv_Trt.csv"))
# save treatment test
irow <- dim(trtTests)[1]
trtTests[irow+1,] <- NA
trtTests[irow+1,1:2] <- c(iSpp,"survival")
tmp <- grep("Treatment",row.names(m1$summary.fixed))
trtTests[irow+1,3:5] <- m1$summary.fixed[tmp,c("mean","0.025quant","0.975quant")]
}
setwd("..")
setwd("recruitment")
# add treatment test data for ARTR
pars.summary <- read.csv("recruit_params_m1.csv")
irow <- dim(trtTests)[1]
trtTests[irow+1,] <- NA
trtTests[irow+1,1:2] <- c("ARTR","recruitment")
tmp <- grep("intcpt.trt",row.names(pars.summary))
trtTests[irow+1,3:5] <- pars.summary[tmp[5],c("mean","X2.5.","X97.5.")]
# add treatment test data for the three grasses
irow <- dim(trtTests)[1]
trtTests[(irow+1):(irow+3),] <- NA
trtTests[(irow+1):(irow+3),1:2] <- cbind(c("HECO","POSE","PSSP"),rep("recruitment",3))
trtTests[(irow+1):(irow+3),3:5] <- pars.summary[tmp[2:4],c("mean","X2.5.","X97.5.")]
setwd("..")
# write trtTests to file
trtTests <- trtTests[-1,] # throw away first line junk
write.csv(trtTests,"treatment_test_results.csv",row.names=F)
# make treatment effect figure
source("treatment_test_figure.r")
library("TeachingDemos") # for inset plots
setwd("Wdistrib")
source("exploreSurvivalWs.R")
setwd("..")
sppList <-  c("ARTR","HECO","POSE","PSSP")
source("validate/get_W_functions.r")  # get neighbor distance decay functions
# do contemporary control plots
quadList <- paste0("Q",c(1:6,19:26))
groupList <- c(rep(1,6),rep(6,4),rep(3,4))
removeSpp <- NULL
trtEffects <- FALSE  # TRUE means use a model that includes removal treatment effects
for(iQuad in 1:length(quadList)){
qName=quadList[iQuad]
doGroup=groupList[iQuad]
source("validate/ibm_validate_removal.r")   # project forward from 2011
source("validate/ibm_validate_removal_1step.r")  # just predict one time step ahead for each year
}
# do no grass plots
quadList <- c("Q48","Q49","Q51","Q55","Q57","Q58","Q60","Q62")  # no grass
removeSpp <- c("HECO","POSE","PSSP")
for(iQuad in quadList){
qName=iQuad
doGroup=1
trtEffects <- FALSE
source("validate/ibm_validate_removal.r")
source("validate/ibm_validate_removal_1step.r")
trtEffects <- TRUE
source("validate/ibm_validate_removal.r")
source("validate/ibm_validate_removal_1step.r")
}
# do no shrub plots
quadList <- c("Q47","Q50","Q52","Q53","Q54","Q56","Q59","Q61")  # no shrub
removeSpp <- c("ARTR")
for(iQuad in quadList){
qName=iQuad
doGroup=1
trtEffects <- FALSE
source("validate/ibm_validate_removal.r")
source("validate/ibm_validate_removal_1step.r")
trtEffects <- TRUE
source("validate/ibm_validate_removal.r")
source("validate/ibm_validate_removal_1step.r")
}
# make figure for simulation results
source("validate/summarize_validate_sims1step.r")
getwd()
# call from validate wrapper
setwd("validate/")
sppList=c("ARTR","HECO","POSE","PSSP")
Nspp=length(sppList)
sppNames=c("A. tripartita","H. comata","Poa secunda","P. spicata")
myCol=c("black","forestgreen","blue","red")
# function to load observed and predicted cover
getSims<-function(qList,trtEffects){
out=NULL
for(i in qList){
if(trtEffects==F){
infile=paste("simulations1step/",i,"_validation_cov_removals_noTrt.csv",sep="")
}else{
infile=paste("simulations1step/",i,"_validation_cov_removals_Trt.csv",sep="")
}
tmpD=read.csv(infile)
out <- rbind(out,tmpD)
}
return(out)
}
# function to load data and calculate log(cover_t+1 / cover_t)
getPopGrowth<-function(qList,trtEffects){
out=NULL
for(i in qList){
if(trtEffects==F){
infile=paste("simulations1step/",i,"_validation_cov_removals_noTrt.csv",sep="")
}else{
infile=paste("simulations1step/",i,"_validation_cov_removals_Trt.csv",sep="")
}
tmpD=read.csv(infile)
# make sure that the denominator (t0) is always the observed cover, not predicted cover
change=data.frame(year=tmpD$year[1:(NROW(tmpD)-1)],
log(tmpD[2:NROW(tmpD),2:NCOL(tmpD)]/cbind(tmpD[1:(NROW(tmpD)-1),2:5],tmpD[1:(NROW(tmpD)-1),2:5])))
change[change==Inf]<-NA; change[change==-Inf]<-NA
out=rbind(out,change)
}
return(out)
}
# control plots
qList <- paste0("Q",c(1:6,19:26))  # all contemporary control plots#
#qList <- c("Q1","Q2","Q3","Q4","Q5","Q6" ) # just Group 1
quadD <- getSims(qList,trtEffects=F)
control.cov <- aggregate(quadD[,2:NCOL(quadD)],by=list(year=quadD$year),FUN=mean,na.rm=T)
quadD <- getPopGrowth(qList,trtEffects=F)
control.pgr <- aggregate(quadD[,2:NCOL(quadD)],by=list(year=quadD$year),FUN=mean,na.rm=T)
#control.sd=aggregate(quadD[,2:NCOL(quadD)],by=list(year=quadD$year),FUN=sd,na.rm=T)
# no shrub plots, no treatment effects
qList <- c("Q47","Q50","Q52","Q53","Q54","Q56","Q59","Q61")
quadD <- getSims(qList,trtEffects=F)
noshrub.cov <- aggregate(quadD[,2:NCOL(quadD)],by=list(year=quadD$year),FUN=mean,na.rm=T)
quadD <- getPopGrowth(qList,trtEffects=F)
noshrub.pgr <- aggregate(quadD[,2:NCOL(quadD)],by=list(year=quadD$year),FUN=mean,na.rm=T)
# no shrub plots, WITH treatment effects
qList <- c("Q47","Q50","Q52","Q53","Q54","Q56","Q59","Q61")
quadD <- getSims(qList,trtEffects=T)
noshrubTRT.cov <- aggregate(quadD[,2:NCOL(quadD)],by=list(year=quadD$year),FUN=mean,na.rm=T)
quadD <- getPopGrowth(qList,trtEffects=T)
noshrubTRT.pgr <- aggregate(quadD[,2:NCOL(quadD)],by=list(year=quadD$year),FUN=mean,na.rm=T)
# no grass plots, no treatment effects
qList <- c("Q48","Q49","Q51","Q55","Q57","Q58","Q60","Q62")  # no grass
quadD <- getSims(qList,trtEffects=F)
nograss.cov <- aggregate(quadD[,2:NCOL(quadD)],by=list(year=quadD$year),FUN=mean,na.rm=T)
quadD <- getPopGrowth(qList,trtEffects=F)
nograss.pgr <- aggregate(quadD[,2:NCOL(quadD)],by=list(year=quadD$year),FUN=mean,na.rm=T)
# no grass plots, no treatment effects
qList <- c("Q48","Q49","Q51","Q55","Q57","Q58","Q60","Q62")  # no grass
quadD <- getSims(qList,trtEffects=T)
nograssTRT.cov <- aggregate(quadD[,2:NCOL(quadD)],by=list(year=quadD$year),FUN=mean,na.rm=T)
quadD <- getPopGrowth(qList,trtEffects=T)
nograssTRT.pgr <- aggregate(quadD[,2:NCOL(quadD)],by=list(year=quadD$year),FUN=mean,na.rm=T)
###
### plot observed and predicted cover chronologically
###
#set up plotting function
plotTimeSeries<-function(doSpp,mydata1,mydata2,mydata3,mytitle){
# choose colors
col1="dodgerblue3"
col2="red3"
# format data
newD=data.frame(mydata1$year,mydata1[,1+doSpp],mydata1[,5+doSpp],  # control obs and pred
mydata2[,1+doSpp],mydata2[,5+doSpp], # removal obs and pred (no TRT effect)
mydata3[,5+doSpp])                               # removal pred (with TRT effect)
names(newD)=c("year","control.obs","control.pred","remove.obs","remove.pred","remove.predTRT")
matplot(newD$year,newD[,2:6]/100,type="o",xlab="",ylab="",
col=c(rep(col1,2),rep(col2,3)),
pch=c(16,1,16,1,2),
lty=c("solid","blank","solid","blank","blank"))
#line segments for controls
segments(x0=newD$year[1:4],y0=newD$control.obs[1:4]/100,
x1=newD$year[2:5],y1=newD$control.pred[2:5]/100,col=col1,lty="dashed")
#line segments for removals, no TRT
segments(x0=newD$year[1:4],y0=newD$remove.obs[1:4]/100,
x1=newD$year[2:5],y1=newD$remove.pred[2:5]/100,col=col2,lty="dashed")
#line segments for removals, no TRT
segments(x0=newD$year[1:4],y0=newD$remove.obs[1:4]/100,
x1=newD$year[2:5],y1=newD$remove.predTRT[2:5]/100,col=col2,lty="dashed")
title(main=mytitle,adj=0,font.main=1)
}
png("obsVSpred_project1step.png",units="in",height=3.5,width=8.5,res=600)
par(mfrow=c(1,4),tcl=-0.2,mgp=c(2,0.5,0),mar=c(2,2,2,1),oma=c(2,2,0,0))
plotTimeSeries(1,control.cov,nograss.cov,nograssTRT.cov,"ARTR")
plotTimeSeries(2,control.cov,noshrub.cov,noshrubTRT.cov,"HECO")
plotTimeSeries(3,control.cov,noshrub.cov,noshrubTRT.cov,"POSE")
plotTimeSeries(4,control.cov,noshrub.cov,noshrubTRT.cov,"PSSP")
mtext(side=1,"Year",line=0.5, outer=T)
mtext(side=2,"Mean cover (%)",line=0.5, outer=T)
dev.off()
getwd()
png("obsVSpred_project1step.png",units="in",height=6.5,width=8.5,res=600)
par(mfrow=c(1,4),tcl=-0.2,mgp=c(2,0.5,0),mar=c(2,2,2,1),oma=c(2,2,0,0))
plotTimeSeries(1,control.cov,nograss.cov,nograssTRT.cov,"ARTR")
plotTimeSeries(2,control.cov,noshrub.cov,noshrubTRT.cov,"HECO")
plotTimeSeries(3,control.cov,noshrub.cov,noshrubTRT.cov,"POSE")
plotTimeSeries(4,control.cov,noshrub.cov,noshrubTRT.cov,"PSSP")
mtext(side=1,"Year",line=0.5, outer=T)
mtext(side=2,"Mean cover (%)",line=0.5, outer=T)
dev.off()
png("obsVSpred_project1step.png",units="in",height=3.5,width=8.5,res=600)
par(mfrow=c(1,4),tcl=-0.2,mgp=c(2,0.5,0),mar=c(2,2,2,1),oma=c(2,2,0,0))
plotTimeSeries(1,control.cov,nograss.cov,nograssTRT.cov,"ARTR")
plotTimeSeries(2,control.cov,noshrub.cov,noshrubTRT.cov,"HECO")
plotTimeSeries(3,control.cov,noshrub.cov,noshrubTRT.cov,"POSE")
plotTimeSeries(4,control.cov,noshrub.cov,noshrubTRT.cov,"PSSP")
mtext(side=1,"Year",line=0.5, outer=T)
mtext(side=2,"Mean cover (%)",line=0.5, outer=T)
dev.off()
###
### 5. get equilibrium cover from an IPM ###############################
###
sppList <-  c("ARTR","HECO","POSE","PSSP")
source("validate/get_W_functions.r")  # get neighbor distance decay functions
#no treatment effects, all species
init.species <- c(1:4)
tlimit <- 2500
burn.in <- 500
trtEffects=F
source("ipm/IPM-setup.r")
source("ipm/IPM-getEquilibrium.r")
write.csv(covSave[(burn.in+1):tlimit,],"ipm/baselineCover.csv",row.names=F)
meanCover1 <- meanCover
#no treatment effects, ARTR removal
init.species <- c(2:4)
source("ipm/IPM-getEquilibrium.r")
write.csv(covSave[(burn.in+1):tlimit,],"ipm/baselineCover-noARTR.csv",row.names=F)
meanCover2 <- meanCover
# removal treatment effects, ARTR removal
init.species <- c(2:4)
trtEffects=T
source("ipm/IPM-setup.r")
source("ipm/IPM-getEquilibrium.r")
write.csv(covSave[(burn.in+1):tlimit,],"ipm/removalCover-noARTR.csv",row.names=F)
meanCover3 <- meanCover
simResults <- rbind(meanCover1,meanCover2,meanCover3)
colnames(simResults) <- sppList
write.csv(simResults,"ipm/simResults-meanCover.csv",row.names=F)
source("ipm/IPM-figures.r")
getwd()
setwd("..")
###
### 5. get equilibrium cover from an IPM ###############################
###
sppList <-  c("ARTR","HECO","POSE","PSSP")
source("validate/get_W_functions.r")  # get neighbor distance decay functions
#no treatment effects, all species
init.species <- c(1:4)
tlimit <- 2500
burn.in <- 500
trtEffects=F
source("ipm/IPM-setup.r")
source("ipm/IPM-getEquilibrium.r")
write.csv(covSave[(burn.in+1):tlimit,],"ipm/baselineCover.csv",row.names=F)
meanCover1 <- meanCover
#no treatment effects, ARTR removal
init.species <- c(2:4)
source("ipm/IPM-getEquilibrium.r")
write.csv(covSave[(burn.in+1):tlimit,],"ipm/baselineCover-noARTR.csv",row.names=F)
meanCover2 <- meanCover
# removal treatment effects, ARTR removal
init.species <- c(2:4)
trtEffects=T
source("ipm/IPM-setup.r")
source("ipm/IPM-getEquilibrium.r")
write.csv(covSave[(burn.in+1):tlimit,],"ipm/removalCover-noARTR.csv",row.names=F)
meanCover3 <- meanCover
simResults <- rbind(meanCover1,meanCover2,meanCover3)
colnames(simResults) <- sppList
write.csv(simResults,"ipm/simResults-meanCover.csv",row.names=F)
source("ipm/IPM-figures.r")
sppList <-  c("ARTR","HECO","POSE","PSSP")
source("validate/get_W_functions.r")  # get neighbor distance decay functions
#no treatment effects, all species
init.species <- c(1:4)
tlimit <- 2500
burn.in <- 500
trtEffects=F
source("ipm/IPM-setup.r")
source("ipm/IPM-getEquilibrium.r")
write.csv(covSave[(burn.in+1):tlimit,],"ipm/baselineCover.csv",row.names=F)
meanCover1 <- meanCover
#no treatment effects, ARTR removal
init.species <- c(2:4)
source("ipm/IPM-getEquilibrium.r")
write.csv(covSave[(burn.in+1):tlimit,],"ipm/baselineCover-noARTR.csv",row.names=F)
meanCover2 <- meanCover
# removal treatment effects, ARTR removal
init.species <- c(2:4)
trtEffects=T
source("ipm/IPM-setup.r")
source("ipm/IPM-getEquilibrium.r")
write.csv(covSave[(burn.in+1):tlimit,],"ipm/removalCover-noARTR.csv",row.names=F)
meanCover3 <- meanCover
simResults <- rbind(meanCover1,meanCover2,meanCover3)
colnames(simResults) <- sppList
write.csv(simResults,"ipm/simResults-meanCover.csv",row.names=F)
source("ipm/IPM-figures.r")
# call all scripts for removal experiment analysis
rm(list=ls(all=TRUE))
graphics.off();
root=ifelse(.Platform$OS.type=="windows","c:/Repos","~/repos"); # modify as needed
setwd(paste(root,"/ExperimentTests/removals/",sep="")); # modify as needed
###
### 1. get treatment trends #################################
###
source("treatment_trends_removals.r")
###
### 2. fit vital rate regressions ###########################
###
# table to store Treatment effects
trtTests <- data.frame("species"="c","stage"="c","effect"=1,"CI.02.5"=1,"CI.97.5"=1,stringsAsFactors = F)
# fit growth models (takes < 5 mins)
library(INLA)
setwd("growth")
source("write_params.r") # get function to format and output parameters
for(iSpp in c("ARTR","HECO","POSE","PSSP")){
source(paste0(iSpp,"growth.r"))
# write parameters
formatGrowthPars(m0,paste0(iSpp,"_growth_noTrt.csv"))
formatGrowthPars(m1,paste0(iSpp,"_growth_Trt.csv"))
# save treatment test
irow <- dim(trtTests)[1]
trtTests[irow+1,] <- NA
trtTests[irow+1,1:2] <- c(iSpp,"growth")
tmp <- grep("Treatment",row.names(m1$summary.fixed))
trtTests[irow+1,3:5] <- m1$summary.fixed[tmp,c("mean","0.025quant","0.975quant")]
}
setwd("..")
sppList <-  c("ARTR","HECO","POSE","PSSP")
source("validate/get_W_functions.r")  # get neighbor distance decay functions
#no treatment effects, all species
init.species <- c(1:4)
tlimit <- 2500
burn.in <- 500
trtEffects=F
source("ipm/IPM-setup.r")
source("ipm/IPM-getEquilibrium.r")
write.csv(covSave[(burn.in+1):tlimit,],"ipm/baselineCover.csv",row.names=F)
meanCover1 <- meanCover
#no treatment effects, ARTR removal
init.species <- c(2:4)
source("ipm/IPM-getEquilibrium.r")
write.csv(covSave[(burn.in+1):tlimit,],"ipm/baselineCover-noARTR.csv",row.names=F)
meanCover2 <- meanCover
# removal treatment effects, ARTR removal
init.species <- c(2:4)
trtEffects=T
source("ipm/IPM-setup.r")
source("ipm/IPM-getEquilibrium.r")
write.csv(covSave[(burn.in+1):tlimit,],"ipm/removalCover-noARTR.csv",row.names=F)
meanCover3 <- meanCover
simResults <- rbind(meanCover1,meanCover2,meanCover3)
colnames(simResults) <- sppList
write.csv(simResults,"ipm/simResults-meanCover.csv",row.names=F)
source("ipm/IPM-figures.r")
setwd("growth")
source("write_params.r") # get function to format and output parameters
for(iSpp in c("ARTR","HECO","POSE","PSSP")){
source(paste0(iSpp,"growth.r"))
# write parameters
formatGrowthPars(m0,paste0(iSpp,"_growth_noTrt.csv"))
formatGrowthPars(m1,paste0(iSpp,"_growth_Trt.csv"))
# save treatment test
irow <- dim(trtTests)[1]
trtTests[irow+1,] <- NA
trtTests[irow+1,1:2] <- c(iSpp,"growth")
tmp <- grep("Treatment",row.names(m1$summary.fixed))
trtTests[irow+1,3:5] <- m1$summary.fixed[tmp,c("mean","0.025quant","0.975quant")]
}
setwd("..")
###
### 5. get equilibrium cover from an IPM ###############################
###
sppList <-  c("ARTR","HECO","POSE","PSSP")
source("validate/get_W_functions.r")  # get neighbor distance decay functions
#no treatment effects, all species
init.species <- c(1:4)
tlimit <- 2500
burn.in <- 500
trtEffects=F
source("ipm/IPM-setup.r")
source("ipm/IPM-getEquilibrium.r")
write.csv(covSave[(burn.in+1):tlimit,],"ipm/baselineCover.csv",row.names=F)
meanCover1 <- meanCover
#no treatment effects, ARTR removal
init.species <- c(2:4)
source("ipm/IPM-getEquilibrium.r")
write.csv(covSave[(burn.in+1):tlimit,],"ipm/baselineCover-noARTR.csv",row.names=F)
meanCover2 <- meanCover
# removal treatment effects, ARTR removal
init.species <- c(2:4)
trtEffects=T
source("ipm/IPM-setup.r")
source("ipm/IPM-getEquilibrium.r")
write.csv(covSave[(burn.in+1):tlimit,],"ipm/removalCover-noARTR.csv",row.names=F)
meanCover3 <- meanCover
simResults <- rbind(meanCover1,meanCover2,meanCover3)
colnames(simResults) <- sppList
write.csv(simResults,"ipm/simResults-meanCover.csv",row.names=F)
source("ipm/IPM-figures.r")
rm(list=ls(all=TRUE))
graphics.off();
root=ifelse(.Platform$OS.type=="windows","c:/Repos","~/repos"); # modify as needed
setwd(paste(root,"/ExperimentTests/removals/",sep="")); # modify as needed
sppList <-  c("ARTR","HECO","POSE","PSSP")
source("validate/get_W_functions.r")  # get neighbor distance decay functions
# do contemporary control plots
quadList <- paste0("Q",c(1:6,19:26))
groupList <- c(rep(1,6),rep(6,4),rep(3,4))
removeSpp <- NULL
trtEffects <- FALSE  # TRUE means use a model that includes removal treatment effects
for(iQuad in 1:length(quadList)){
qName=quadList[iQuad]
doGroup=groupList[iQuad]
source("validate/ibm_validate_removal.r")   # project forward from 2011
source("validate/ibm_validate_removal_1step.r")  # just predict one time step ahead for each year
}
# do no grass plots
quadList <- c("Q48","Q49","Q51","Q55","Q57","Q58","Q60","Q62")  # no grass
removeSpp <- c("HECO","POSE","PSSP")
for(iQuad in quadList){
qName=iQuad
doGroup=1
trtEffects <- FALSE
source("validate/ibm_validate_removal.r")
source("validate/ibm_validate_removal_1step.r")
trtEffects <- TRUE
source("validate/ibm_validate_removal.r")
source("validate/ibm_validate_removal_1step.r")
}
# do no shrub plots
quadList <- c("Q47","Q50","Q52","Q53","Q54","Q56","Q59","Q61")  # no shrub
removeSpp <- c("ARTR")
for(iQuad in quadList){
qName=iQuad
doGroup=1
trtEffects <- FALSE
source("validate/ibm_validate_removal.r")
source("validate/ibm_validate_removal_1step.r")
trtEffects <- TRUE
source("validate/ibm_validate_removal.r")
source("validate/ibm_validate_removal_1step.r")
}
# make figure for simulation results
source("validate/summarize_validate_sims1step.r")
###
### 5. get equilibrium cover from an IPM ###############################
###
sppList <-  c("ARTR","HECO","POSE","PSSP")
source("validate/get_W_functions.r")  # get neighbor distance decay functions
#no treatment effects, all species
init.species <- c(1:4)
tlimit <- 2500
burn.in <- 500
trtEffects=F
source("ipm/IPM-setup.r")
source("ipm/IPM-getEquilibrium.r")
write.csv(covSave[(burn.in+1):tlimit,],"ipm/baselineCover.csv",row.names=F)
meanCover1 <- meanCover
#no treatment effects, ARTR removal
init.species <- c(2:4)
source("ipm/IPM-getEquilibrium.r")
write.csv(covSave[(burn.in+1):tlimit,],"ipm/baselineCover-noARTR.csv",row.names=F)
meanCover2 <- meanCover
# removal treatment effects, ARTR removal
init.species <- c(2:4)
trtEffects=T
source("ipm/IPM-setup.r")
source("ipm/IPM-getEquilibrium.r")
write.csv(covSave[(burn.in+1):tlimit,],"ipm/removalCover-noARTR.csv",row.names=F)
meanCover3 <- meanCover
simResults <- rbind(meanCover1,meanCover2,meanCover3)
colnames(simResults) <- sppList
write.csv(simResults,"ipm/simResults-meanCover.csv",row.names=F)
source("ipm/IPM-figures.r")
simResults
