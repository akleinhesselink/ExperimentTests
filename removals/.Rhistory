Gpars=list(intcpt=rep(NA,Nspp),intcpt.yr=matrix(0,Nyrs,Nspp),intcpt.gr=matrix(0,6,Nspp),intcpt.trt=rep(0,Nspp),
slope=rep(NA,Nspp),slope.yr=matrix(0,Nyrs,Nspp),
nb=matrix(0,Nspp,Nspp),sigma2.a=rep(NA,Nspp),sigma2.b=rep(NA,Nspp))
Gdata=read.csv(infile)
head(Gdata)
# growth parameters
Gpars=list(intcpt=rep(NA,Nspp),intcpt.yr=matrix(0,Nyrs,Nspp),intcpt.gr=matrix(0,6,Nspp),intcpt.trt=rep(0,Nspp),
slope=rep(NA,Nspp),slope.yr=matrix(0,Nyrs,Nspp),
nb=matrix(0,Nspp,Nspp),sigma2.a=rep(NA,Nspp),sigma2.b=rep(NA,Nspp))
for(i in 1:Nspp){
if(!is.null(removeSpp)){
infile=paste0("growth/",sppList[i],"_growth_Trt.csv")
}else{
infile=paste0("growth/",sppList[i],"_growth_noTrt.csv")
}
Gdata=read.csv(infile)
# main intercept
Gpars$intcpt[i]=Gdata$X.Intercept.[1]
# Treatment effect
tmp=grep("Treatment",names(Sdata))
if(length(tmp)>0) Spars$intcpt.trt[i]=Sdata[1,tmp]
# group effects
tmp=which(names(Gdata)=="Group")
if(length(tmp)>0) Gpars$intcpt.gr[,i]=Gdata$Group[!is.na(Gdata$Group)]
Gpars$intcpt.yr[,i]=Gdata$X.Intercept..yr
Gpars$slope[i]=Gdata$logarea.t0[1]
# random effects on slope
tmp=which(names(Gdata)=="logarea.t0.yr")
if(length(tmp)>0) Gpars$slope.yr[,i]=Gdata[,tmp]
# get competition coefficients
tmp=paste("W",sppList,sep=".")
tmp=which(is.element(names(Gdata),tmp))
if(length(tmp)>0) Gpars$nb[i,]=as.numeric(Gdata[1,tmp])
# variance parameters
Gpars$sigma2.a[i]=Gdata$sigma.a[1]
Gpars$sigma2.b[i]=Gdata$sigma.b[1]
} # next i
rm(Gdata)
# growth parameters
Gpars=list(intcpt=rep(NA,Nspp),intcpt.yr=matrix(0,Nyrs,Nspp),intcpt.gr=matrix(0,6,Nspp),intcpt.trt=rep(0,Nspp),
slope=rep(NA,Nspp),slope.yr=matrix(0,Nyrs,Nspp),
nb=matrix(0,Nspp,Nspp),sigma2.a=rep(NA,Nspp),sigma2.b=rep(NA,Nspp))
for(i in 1:Nspp){
if(!is.null(removeSpp)){
infile=paste0("growth/",sppList[i],"_growth_Trt.csv")
}else{
infile=paste0("growth/",sppList[i],"_growth_noTrt.csv")
}
Gdata=read.csv(infile)
# main intercept
Gpars$intcpt[i]=Gdata$X.Intercept.[1]
# Treatment effect
tmp=grep("Treatment",names(Gdata))
if(length(tmp)>0) Spars$intcpt.trt[i]=Gdata[1,tmp]
# group effects
tmp=which(names(Gdata)=="Group")
if(length(tmp)>0) Gpars$intcpt.gr[,i]=Gdata$Group[!is.na(Gdata$Group)]
Gpars$intcpt.yr[,i]=Gdata$X.Intercept..yr
Gpars$slope[i]=Gdata$logarea.t0[1]
# random effects on slope
tmp=which(names(Gdata)=="logarea.t0.yr")
if(length(tmp)>0) Gpars$slope.yr[,i]=Gdata[,tmp]
# get competition coefficients
tmp=paste("W",sppList,sep=".")
tmp=which(is.element(names(Gdata),tmp))
if(length(tmp)>0) Gpars$nb[i,]=as.numeric(Gdata[1,tmp])
# variance parameters
Gpars$sigma2.a[i]=Gdata$sigma.a[1]
Gpars$sigma2.b[i]=Gdata$sigma.b[1]
} # next i
rm(Gdata)
Gpars
removeSpp <- c("HECO","POSE","PSSP")
# Import and format growth parameters
# then define growth function
# growth parameters
Gpars=list(intcpt=rep(NA,Nspp),intcpt.yr=matrix(0,Nyrs,Nspp),intcpt.gr=matrix(0,6,Nspp),intcpt.trt=rep(0,Nspp),
slope=rep(NA,Nspp),slope.yr=matrix(0,Nyrs,Nspp),
nb=matrix(0,Nspp,Nspp),sigma2.a=rep(NA,Nspp),sigma2.b=rep(NA,Nspp))
for(i in 1:Nspp){
if(!is.null(removeSpp)){
infile=paste0("growth/",sppList[i],"_growth_Trt.csv")
}else{
infile=paste0("growth/",sppList[i],"_growth_noTrt.csv")
}
Gdata=read.csv(infile)
# main intercept
Gpars$intcpt[i]=Gdata$X.Intercept.[1]
# Treatment effect
tmp=grep("Treatment",names(Gdata))
if(length(tmp)>0) Spars$intcpt.trt[i]=Gdata[1,tmp]
# group effects
tmp=which(names(Gdata)=="Group")
if(length(tmp)>0) Gpars$intcpt.gr[,i]=Gdata$Group[!is.na(Gdata$Group)]
Gpars$intcpt.yr[,i]=Gdata$X.Intercept..yr
Gpars$slope[i]=Gdata$logarea.t0[1]
# random effects on slope
tmp=which(names(Gdata)=="logarea.t0.yr")
if(length(tmp)>0) Gpars$slope.yr[,i]=Gdata[,tmp]
# get competition coefficients
tmp=paste("W",sppList,sep=".")
tmp=which(is.element(names(Gdata),tmp))
if(length(tmp)>0) Gpars$nb[i,]=as.numeric(Gdata[1,tmp])
# variance parameters
Gpars$sigma2.a[i]=Gdata$sigma.a[1]
Gpars$sigma2.b[i]=Gdata$sigma.b[1]
} # next i
rm(Gdata)
Gpars
removeSpp
# Import and format growth parameters
# then define growth function
# growth parameters
Gpars=list(intcpt=rep(NA,Nspp),intcpt.yr=matrix(0,Nyrs,Nspp),intcpt.gr=matrix(0,6,Nspp),intcpt.trt=rep(0,Nspp),
slope=rep(NA,Nspp),slope.yr=matrix(0,Nyrs,Nspp),
nb=matrix(0,Nspp,Nspp),sigma2.a=rep(NA,Nspp),sigma2.b=rep(NA,Nspp))
for(i in 1:Nspp){
if(!is.null(removeSpp)){
infile=paste0("growth/",sppList[i],"_growth_Trt.csv")
}else{
infile=paste0("growth/",sppList[i],"_growth_noTrt.csv")
}
Gdata=read.csv(infile)
# main intercept
Gpars$intcpt[i]=Gdata$X.Intercept.[1]
# Treatment effect
tmp=grep("Treatment",names(Gdata))
if(length(tmp)>0) Gpars$intcpt.trt[i]=Gdata[1,tmp]
# group effects
tmp=which(names(Gdata)=="Group")
if(length(tmp)>0) Gpars$intcpt.gr[,i]=Gdata$Group[!is.na(Gdata$Group)]
Gpars$intcpt.yr[,i]=Gdata$X.Intercept..yr
Gpars$slope[i]=Gdata$logarea.t0[1]
# random effects on slope
tmp=which(names(Gdata)=="logarea.t0.yr")
if(length(tmp)>0) Gpars$slope.yr[,i]=Gdata[,tmp]
# get competition coefficients
tmp=paste("W",sppList,sep=".")
tmp=which(is.element(names(Gdata),tmp))
if(length(tmp)>0) Gpars$nb[i,]=as.numeric(Gdata[1,tmp])
# variance parameters
Gpars$sigma2.a[i]=Gdata$sigma.a[1]
Gpars$sigma2.b[i]=Gdata$sigma.b[1]
} # next i
rm(Gdata)
Gpars
source("growth/import2ibm.r")
calYrList=2011:2014
doYrList=which(is.element(Spars$yrList,calYrList))
doYrList
# recruitment parameters
Rpars=list(intcpt.mu=rep(0,Nspp),intcpt.yr=matrix(0,Nyrs,Nspp),intcpt.trt=rep(0,Nspp),intcpt.tau=rep(100,Nspp),
intcpt.gr=matrix(NA,6,Nspp),g.tau=rep(NA,Nspp),
dd=matrix(NA,Nspp,Nspp),theta=rep(NA,Nspp),sizeMean=rep(NA,Nspp),sizeVar=rep(NA,Nspp),
recSizes=list(1))
if(!is.null(removeSpp)){
infile=paste0("recruitment/recruit_params_m1.csv")
}else{
infile=paste0("recruitment/recruit_params_m0.csv")
}
Rdata=read.csv(infile)
tmp=c(grep("lambda",row.names(Rdata)),grep("deviance",row.names(Rdata)),
grep("DIC",row.names(Rdata)))
Rdata=Rdata[-tmp,]
tmp=paste("Rpars$",row.names(Rdata),"<-",Rdata[,1],sep="")
eval(parse(n=dim(Rdata)[1],text=tmp))
Rpars=list(intcpt.mu=rep(0,Nspp),intcpt.yr=matrix(0,Nyrs,Nspp),intcpt.trt=matrix(0,3,Nspp),intcpt.tau=rep(100,Nspp),
intcpt.gr=matrix(NA,6,Nspp),g.tau=rep(NA,Nspp),
dd=matrix(NA,Nspp,Nspp),theta=rep(NA,Nspp),sizeMean=rep(NA,Nspp),sizeVar=rep(NA,Nspp),
recSizes=list(1))
if(!is.null(removeSpp)){
infile=paste0("recruitment/recruit_params_m1.csv")
}else{
infile=paste0("recruitment/recruit_params_m0.csv")
}
Rdata=read.csv(infile)
# subset out non-essential parameters
tmp=c(grep("lambda",row.names(Rdata)),grep("deviance",row.names(Rdata)),
grep("DIC",row.names(Rdata)))
Rdata=Rdata[-tmp,]
tmp=paste("Rpars$",row.names(Rdata),"<-",Rdata[,1],sep="")
eval(parse(n=dim(Rdata)[1],text=tmp))
head(tmp)
Rpars
# import parameters
# recruitment parameters
Rpars=list(intcpt.mu=rep(0,Nspp),intcpt.yr=matrix(0,Nyrs,Nspp),intcpt.trt=matrix(0,3,Nspp),intcpt.tau=rep(100,Nspp),
intcpt.gr=matrix(NA,6,Nspp),g.tau=rep(NA,Nspp),
dd=matrix(NA,Nspp,Nspp),theta=rep(NA,Nspp),sizeMean=rep(NA,Nspp),sizeVar=rep(NA,Nspp),
recSizes=list(1))
if(!is.null(removeSpp)){
infile=paste0("recruitment/recruit_params_m1.csv")
}else{
infile=paste0("recruitment/recruit_params_m0.csv")
}
Rdata=read.csv(infile)
# subset out non-essential parameters
tmp=c(grep("lambda",row.names(Rdata)),grep("deviance",row.names(Rdata)),
grep("DIC",row.names(Rdata)))
Rdata=Rdata[-tmp,]
tmp=paste("Rpars$",row.names(Rdata),"<-",Rdata[,1],sep="")
eval(parse(n=dim(Rdata)[1],text=tmp))
for(i in 1:Nspp){
infile=paste("H:/idahochart/ipm/speciesData/",sppList[i],"/recSize.csv",sep="")
recSize=read.csv(infile)
Rpars$sizeMean[i]=mean(log(recSize$area))
Rpars$sizeVar[i]=var(log(recSize$area))
#Rpars$recSizes[[i]]=recSize$area
}
Rpars$dd=t(Rpars$dd) # c[i,j] = effect of j on i
rm(Rdata)
# import parameters
# recruitment parameters
Rpars=list(intcpt.mu=rep(0,Nspp),intcpt.yr=matrix(0,Nyrs,Nspp),intcpt.trt=matrix(0,3,Nspp),intcpt.tau=rep(100,Nspp),
intcpt.gr=matrix(NA,6,Nspp),g.tau=rep(NA,Nspp),
dd=matrix(NA,Nspp,Nspp),theta=rep(NA,Nspp),sizeMean=rep(NA,Nspp),sizeVar=rep(NA,Nspp),
recSizes=list(1))
if(!is.null(removeSpp)){
infile=paste0("recruitment/recruit_params_m1.csv")
}else{
infile=paste0("recruitment/recruit_params_m0.csv")
}
Rdata=read.csv(infile)
# subset out non-essential parameters
tmp=c(grep("lambda",row.names(Rdata)),grep("deviance",row.names(Rdata)),
grep("DIC",row.names(Rdata)))
Rdata=Rdata[-tmp,]
tmp=paste("Rpars$",row.names(Rdata),"<-",Rdata[,1],sep="")
eval(parse(n=dim(Rdata)[1],text=tmp))
for(i in 1:Nspp){
infile=paste("H:/idahochart/ipm/speciesData/",sppList[i],"/recSize.csv",sep="")
recSize=read.csv(infile)
Rpars$sizeMean[i]=mean(log(recSize$area))
Rpars$sizeVar[i]=var(log(recSize$area))
#Rpars$recSizes[[i]]=recSize$area
}
Rpars$dd=t(Rpars$dd) # c[i,j] = effect of j on i
# reformat treatment effects
Rpars$intcpt.trt <- c(Rpars$intcpt.trt[3,1], # ARTR in no_grass
Rpars$intcpt.trt[2,2:4])   # grasses in no_shrub
rm(Rdata)
Rpars$intcpt.trt
Rpars$intpct.yr
Rpars$intcpt.yr
View(recruit)
recruit
source('C:/Repos/ExperimentTests/removals/recruitment/import2ibm.r', echo=TRUE)
recruit
# call all scripts for removal experiment analysis
rm(list=ls(all=TRUE))
graphics.off();
root=ifelse(.Platform$OS.type=="windows","c:/Repos","~/repos"); # modify as needed
setwd(paste(root,"/ExperimentTests/removals/",sep="")); # modify as needed
sppList <-  c("ARTR","HECO","POSE","PSSP")
source("validate/get_W_functions.r")  # get neighbor distance decay functions
# do control plots
quadList <- c("Q1","Q2","Q3","Q4","Q5","Q6" )  # no shrub
removeSpp <- NULL
doGroup=1
iQuad="Q1"
qName=iQuad
doGroup=1
source("validate/ibm_validate_removal.r")
source("validate/ibm_validate_removal.r")
removeSpp <- NULL
doGroup=1
qName=iQuad
doGroup=1
source("validate/ibm_validate_removal.r")
Gpars
source("validate/ibm_validate_removal.r")
source("validate/ibm_validate_removal.r")
survive(Spars,doSpp=ss,doGroup=doGroup,doYear=doYr,sizes=plants[,2],crowding=W)
survive
Spars$slope[doSpp]+Spars$slope.yr[doYear,doSpp]
doSpp=1
Spars$slope[doSpp]+Spars$slope.yr[doYear,doSpp]
doYear=doYr
Spars$slope[doSpp]+Spars$slope.yr[doYear,doSpp]
source("validate/ibm_validate_removal.r")
ss
plants
doSpp=ss
doYear=doYr
sizes=plants[,2]
crowding=W
logsizes=log(sizes)
mu=Spars$intcpt[doSpp]+Spars$intcpt.gr[doGroup,doSpp]+Spars$intcpt.yr[doYear,doSpp]+Spars$intctp.trt[doSpp]+
Spars$slope[doSpp]*logsizes+Spars$nb[doSpp,]%*%crowding
Spars$intcpt[doSpp]+Spars$intcpt.gr[doGroup,doSpp]+Spars$intcpt.yr[doYear,doSpp]+Spars$intctp.trt[doSpp]
Spars$intcpt[doSpp]
Spars$intcpt.gr[doGroup,doSpp]
Spars$intcpt.yr[doYear,doSpp]
Spars$intctp.trt[doSpp]
mu=Spars$intcpt[doSpp]+Spars$intcpt.gr[doGroup,doSpp]+Spars$intcpt.yr[doYear,doSpp]+Spars$intcpt.trt[doSpp]+
Spars$slope[doSpp]*logsizes+Spars$nb[doSpp,]%*%crowding
source("validate/ibm_validate_removal.r")
predA
obsA
Gparsintcpt.trt
Gpars$intcpt.trt
output1
predA=data.frame(cbind(calYrList,predA))
names(predA)[2:dim(predA)[2]]=paste(sppList,"pred",sep="")
output1=merge(obsA,predA,all.x=T)
year=c(do==calYrList[1],1+do==calYrList)
predA=data.frame(cbind(year,predA))
names(predA)[2:dim(predA)[2]]=paste(sppList,"pred",sep="")
output1=merge(obsA,predA,all.x=T)
predN=data.frame(cbind(year,predN))
names(predN)[2:dim(predN)[2]]=paste(sppList,"pred",sep="")
output2=merge(obsN,predN,all.x=T)
year=c(calYrList[1],1+calYrList)
predA=data.frame(cbind(year,predA))
names(predA)[2:dim(predA)[2]]=paste(sppList,"pred",sep="")
output1=merge(obsA,predA,all.x=T)
predN=data.frame(cbind(year,predN))
names(predN)[2:dim(predN)[2]]=paste(sppList,"pred",sep="")
output2=merge(obsN,predN,all.x=T)
par(mfrow=c(1,2),tcl=-0.2,mgp=c(2,0.5,0))
matplot(output1[,1],output1[,2:NCOL(output1)],type="o",
col=myCol,lty=c(rep("solid",Nspp),c(rep("dashed",Nspp))),
pch=c(rep(16,Nspp),rep(1,Nspp)),xlab="Year",ylab="Cover")
matplot(output2[,1],output2[,2:NCOL(output2)],type="o",
col=myCol,lty=c(rep("solid",Nspp),c(rep("dashed",Nspp))),
pch=c(rep(16,Nspp),rep(1,Nspp)),xlab="Year",ylab="Density")
predA
calYrList
predA=apply(bigA,MARGIN=c(1,2),FUN=mean,na.rm=T)
predN=apply(bigN,MARGIN=c(1,2),FUN=mean)
year=c(calYrList[1],1+calYrList)
predA=data.frame(cbind(year,predA))
names(predA)[2:dim(predA)[2]]=paste(sppList,"pred",sep="")
output1=merge(obsA,predA,all.x=T)
predN=data.frame(cbind(year,predN))
names(predN)[2:dim(predN)[2]]=paste(sppList,"pred",sep="")
output2=merge(obsN,predN,all.x=T)
output1
par(mfrow=c(1,2),tcl=-0.2,mgp=c(2,0.5,0))
matplot(output1[,1],output1[,2:NCOL(output1)],type="o",
col=myCol,lty=c(rep("solid",Nspp),c(rep("dashed",Nspp))),
pch=c(rep(16,Nspp),rep(1,Nspp)),xlab="Year",ylab="Cover")
matplot(output2[,1],output2[,2:NCOL(output2)],type="o",
col=myCol,lty=c(rep("solid",Nspp),c(rep("dashed",Nspp))),
pch=c(rep(16,Nspp),rep(1,Nspp)),xlab="Year",ylab="Density")
write.table(output1,paste0("validate/",outfile1),row.names=F,sep=",")
write.table(output2,paste0("validate/",outfile2),row.names=F,sep=",")
quadList <- c("Q48","Q49","Q51","Q55","Q57","Q58","Q60","Q62")  # no grass
removeSpp <- c("HECO","POSE","PSSP")
iQuad="Q48"
qName=iQuad
doGroup=1
source("validate/ibm_validate_removal.r")
quadList <- c("Q47","Q50","Q52","Q53","Q54","Q56","Q59","Q61")  # no shrub
removeSpp <- c("ARTR")
iQuad="Q47"
qName=iQuad
doGroup=1
source("validate/ibm_validate_removal.r")
# do control plots
quadList <- c("Q1","Q2","Q3","Q4","Q5","Q6" )  # no shrub
removeSpp <- NULL
trtEffects <- FALSE  # TRUE means use a model that includes removal treatment effects
doGroup=1
for(iQuad in quadList){
qName=iQuad
doGroup=1
source("validate/ibm_validate_removal.r")
}
# do no grass plots
quadList <- c("Q48","Q49","Q51","Q55","Q57","Q58","Q60","Q62")  # no grass
removeSpp <- c("HECO","POSE","PSSP")
for(iQuad in quadList){
qName=iQuad
doGroup=1
trtEffects <- FALSE
source("validate/ibm_validate_removal.r")
trtEffects <- TRUE
source("validate/ibm_validate_removal.r")
}
# do no shrub plots
quadList <- c("Q47","Q50","Q52","Q53","Q54","Q56","Q59","Q61")  # no shrub
removeSpp <- c("ARTR")
for(iQuad in quadList){
qName=iQuad
doGroup=1
trtEffects <- FALSE
source("validate/ibm_validate_removal.r")
trtEffects <- TRUE
source("validate/ibm_validate_removal.r")
}
source('C:/Repos/ExperimentTests/removals/validate/summarize_validate_sims.r', echo=TRUE)
source('C:/Repos/ExperimentTests/removals/validate/summarize_validate_sims.r', echo=TRUE)
setwd("..")
source('C:/Repos/ExperimentTests/removals/validate/summarize_validate_sims.r', echo=TRUE)
control.mean
mydata1=control.mean
mydata2=nograss.mean
mydata3=nograssTRT.mean
newD=data.frame(mydata1$year,mydata1[,1+doSpp],mydata1[,5+doSpp],  # control obs and pred
mydata2$year,mydata2[,1+doSpp],mydata2[,5+doSpp], # removal obs and pred (no TRT effect)
mydata3[,5+doSpp])
newD
names(newD)=c("year","control.obs","control.pred","remove.obs","remove.pred","remove.predTRT")
head(newD)
newD=data.frame(mydata1$year,mydata1[,1+doSpp],mydata1[,5+doSpp],  # control obs and pred
mydata2$year,mydata2[,1+doSpp],mydata2[,5+doSpp], # removal obs and pred (no TRT effect)
mydata3[,5+doSpp])                               # removal pred (with TRT effect)
names(newD)=c("year","control.obs","control.pred","remove.obs","remove.pred","remove.predTRT")
head(newD)
# format data
newD=data.frame(mydata1$year,mydata1[,1+doSpp],mydata1[,5+doSpp],  # control obs and pred
mydata2[,1+doSpp],mydata2[,5+doSpp], # removal obs and pred (no TRT effect)
mydata3[,5+doSpp])                               # removal pred (with TRT effect)
names(newD)=c("year","control.obs","control.pred","remove.obs","remove.pred","remove.predTRT")
newD
doSpp
doSpp=1
# format data
newD=data.frame(mydata1$year,mydata1[,1+doSpp],mydata1[,5+doSpp],  # control obs and pred
mydata2[,1+doSpp],mydata2[,5+doSpp], # removal obs and pred (no TRT effect)
mydata3[,5+doSpp])                               # removal pred (with TRT effect)
names(newD)=c("year","control.obs","control.pred","remove.obs","remove.pred","remove.predTRT")
newD
matplot(newD$year,newD[,2:NCOL(newD)]/100,type="n",
xaxt="n",yaxt="n",xlab="",ylab="")
pare(new=T)
matplot(newD$year,newD[,2:3]/100,type="n",xlab="",ylab="",yaxt="n"
col="black",pch=c(16,1),lty=c("solid","dashed"))
matplot(newD$year,newD[,2:NCOL(newD)]/100,type="n",
xaxt="n",yaxt="n",xlab="",ylab="")
par(new=T)
matplot(newD$year,newD[,2:3]/100,type="n",xlab="",ylab="",yaxt="n"
col="black",pch=c(16,1),lty=c("solid","dashed"))
matplot(newD$year,newD[,2:NCOL(newD)]/100,type="n",
xaxt="n",yaxt="n",xlab="",ylab="")
par(new=T)
matplot(newD$year,newD[,2:3]/100,type="n",xlab="",ylab="",yaxt="n",
col="black",pch=c(16,1),lty=c("solid","dashed"))
matplot(newD$year,newD[,2:NCOL(newD)]/100,type="n",
xaxt="n",yaxt="n",xlab="",ylab="")
par(new=T)
matplot(newD$year,newD[,2:3]/100,xlab="",ylab="",yaxt="n",
col="black",pch=c(16,1),lty=c("solid","dashed"))
matplot(newD$year,newD[,2:NCOL(newD)]/100,type="n",
xaxt="n",yaxt="n",xlab="",ylab="")
par(new=T)
matplot(newD$year,newD[,2:3]/100,type="o",xlab="",ylab="",yaxt="n",
col="black",pch=c(16,1),lty=c("solid","dashed"))
matplot(newD$year,newD[,2:NCOL(newD)]/100,type="n",
xaxt="n",yaxt="n",xlab="",ylab="")
par(new=T)
matplot(newD$year,newD[,2:3]/100,type="o",xlab="",ylab="",
col="black",pch=c(16,1),lty=c("solid","dashed"))
matplot(newD$year,newD[,2:NCOL(newD)]/100,type="n",
xaxt="n",yaxt="n",xlab="",ylab="")
par(new=T)
matplot(newD$year,newD[,2:3]/100,type="o",xlab="",ylab="",
col="black",pch=c(16,1),lty=c("solid","dashed"))
par(new=T)
matplot(newD$year,newD[,4:6]/100,type="n",
col="blue",pch=c(16,1,2),lty=c("solid","dashed"))
matplot(newD$year,newD[,2:NCOL(newD)]/100,type="n",
xaxt="n",yaxt="n",xlab="",ylab="")
par(new=T)
matplot(newD$year,newD[,2:3]/100,type="o",xlab="",ylab="",
col="black",pch=c(16,1),lty=c("solid","dashed"))
par(new=T)
matplot(newD$year,newD[,4:6]/100,type="o",xlab="",ylab="",
col="blue",pch=c(16,1,2),lty=c("solid","dashed"))
newD=data.frame(mydata1$year,mydata1[,1+doSpp],mydata1[,5+doSpp],  # control obs and pred
mydata2[,1+doSpp],mydata2[,5+doSpp], # removal obs and pred (no TRT effect)
mydata3[,5+doSpp])                               # removal pred (with TRT effect)
names(newD)=c("year","control.obs","control.pred","remove.obs","remove.pred","remove.predTRT")
matplot(newD$year,newD[,2:6]/100,type="o",xlab="",ylab="",
col=c(rep("black",2),rep("blue",3)),
pch=c(16,1,16,1,2),
lty=c("solid","dashed","solid","dashed","dashed"))
plotObsPred(1,control.mean,nograss.mean,nograssTRT.mean,"ARTR")
#set up plotting function
plotObsPred<-function(doSpp,mydata1,mydata2,mydata3,mytitle){
# format data
newD=data.frame(mydata1$year,mydata1[,1+doSpp],mydata1[,5+doSpp],  # control obs and pred
mydata2[,1+doSpp],mydata2[,5+doSpp], # removal obs and pred (no TRT effect)
mydata3[,5+doSpp])                               # removal pred (with TRT effect)
names(newD)=c("year","control.obs","control.pred","remove.obs","remove.pred","remove.predTRT")
matplot(newD$year,newD[,2:6]/100,type="o",xlab="",ylab="",
col=c(rep("black",2),rep("blue",3)),
pch=c(16,1,16,1,2),
lty=c("solid","dashed","solid","dashed","dashed"))
title(main=mytitle,adj=0,font.main=1)
}
plotObsPred(1,control.mean,nograss.mean,nograssTRT.mean,"ARTR")
png("obsVSpred.png",units="in",height=4.5,width=9.5,res=600)
par(mfrow=c(1,4),tcl=-0.2,mgp=c(2,0.5,0),mar=c(2,2,2,1),oma=c(2,2,0,0))
plotObsPred(1,control.mean,nograss.mean,nograssTRT.mean,"ARTR")
plotObsPred(2,control.mean,noshrub.mean,noshrubTRT.mean,"HECO")
plotObsPred(3,control.mean,noshrub.mean,noshrubTRT.mean,"POSE")
plotObsPred(4,control.mean,noshrub.mean,noshrubTRT.mean,"PSSP")
mtext(side=1,"Year",line=0.5, outer=T)
mtext(side=2,"Mean cover (%)",line=0.5, outer=T)
dev.off()
getwd()
png("obsVSpred.png",units="in",height=3.5,width=8.5,res=600)
par(mfrow=c(1,4),tcl=-0.2,mgp=c(2,0.5,0),mar=c(2,2,2,1),oma=c(2,2,0,0))
plotObsPred(1,control.mean,nograss.mean,nograssTRT.mean,"ARTR")
plotObsPred(2,control.mean,noshrub.mean,noshrubTRT.mean,"HECO")
plotObsPred(3,control.mean,noshrub.mean,noshrubTRT.mean,"POSE")
plotObsPred(4,control.mean,noshrub.mean,noshrubTRT.mean,"PSSP")
mtext(side=1,"Year",line=0.5, outer=T)
mtext(side=2,"Mean cover (%)",line=0.5, outer=T)
dev.off()
