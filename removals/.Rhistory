rawD[rawD==9999]=NA  # replace missing value indicator
# convert PRCP to mm, SNOW to cm, and temps to degress C
rawD[,2:NCOL(rawD)]=rawD[,2:NCOL(rawD)]/10
rawD$TMEAN=(rawD$TMAX+rawD$TMIN)/2
# format date
rawD$year=as.numeric(substring(rawD$DATE,1,4))
rawD$month=as.numeric(substring(rawD$DATE,5,6))
rawD$day=as.numeric(substring(rawD$DATE,7,8))
rawD=rawD[,-1]  # drop raw date column
head(rawD)
yrD <- subset(rawD, year==2015 & month >= 3)
View(yrD)
input<-"Dubois_daily_alldata.csv"
rawD=read.csv(input)
rawD=rawD[,c("DATE","PRCP","SNOW","SNWD","TMAX","TMIN")]
rawD[rawD==9999]=NA  # replace missing value indicator
# convert PRCP to mm, SNOW to cm, and temps to degress C
rawD[,2:NCOL(rawD)]=rawD[,2:NCOL(rawD)]/10
rawD$TMEAN=(rawD$TMAX+rawD$TMIN)/2
# format date
rawD$year=as.numeric(substring(rawD$DATE,1,4))
rawD$month=as.numeric(substring(rawD$DATE,5,6))
rawD$day=as.numeric(substring(rawD$DATE,7,8))
yrD <- subset(rawD, year==2015 & month >= 3)
View(yrD)
head(rawD)
yrD <- subset(rawD, DATE >= 20150315 & DATE< 20150716)
View(yrD)
seasonPPT <- sum(yrD$PRCP)
seasonPPT
seasonTEMP <- mean(yrD$TMEAN)
seasonTEMP
incubeD <- subset(rawD, DATE >= 20150603 & DATE< 20150716)
incubePPT <- sum(incubeD$PRCP)
incubeTEMP <- mean(incubeD$TMEAN)
incubePPT
incubeTEMP
rm(list=ls(all=TRUE))
graphics.off();
root=ifelse(.Platform$OS.type=="windows","c:/Repos","~/repos"); # modify as needed
setwd(paste(root,"/ExperimentTests/removals/",sep="")); # modify as needed
max.CI <- F  # TRUE means use maximum removal effect
source("ibm/summarize_sims1step.r")
source('C:/Repos/ExperimentTests/removals/ibm/summarize_sims1step.r', echo=TRUE)
obs.pgr
obs.pgr.mean
pred.pgr.mean
pred.trt.pgr.mean
plot1to1 <- function(doSpp,mytitle,doLegend=F){
#tmp <- rbind(controlD[,2:NCOL(controlD)],removalD[,2:NCOL(removalD)],removalTRTD[,2:NCOL(removalTRTD)])
#mylims <- c(0.95*min(tmp,na.rm=T),1.05*max(tmp,na.rm=T))
color1=rgb(0,100,255,alpha=175,maxColorValue = 255)
color2=rgb(153,0,0,alpha=175,maxColorValue = 255)
mylims <- c(-1.2,0.9)
plot(obs.pgr.mean[1:5,2+doSpp],pred.pgr.mean[1:5,2+doSpp],xlim=mylims,ylim=mylims,
xlab="",ylab="",type="n")
abline(0,1)
abline(h=0,lty="dotted",col="grey")
abline(v=0,lty="dotted",col="grey")
points(obs.pgr.mean[6:10,2+doSpp],pred.pgr.mean[6:10,2+doSpp],pch=22,bg=color2,cex=1.5)
points(obs.pgr.mean[6:10,2+doSpp],pred.trt.pgr.mean[6:10,2+doSpp],pch=24,bg=color2,cex=1.5)
points(obs.pgr.mean[1:5,2+doSpp],pred.pgr.mean[1:5,2+doSpp],pch=21,bg=color1,cex=1.5)
if(doLegend==T){
legend("topleft",c("Control plots","Removal plots","Removal plots + effects"),pch=c(21,22,24),pt.cex=1.5,
pt.bg=c(color1,color2,color2),bty="n")
}
title(main=mytitle,adj=0,font.main=1)
}
png("obsVSpred1to1.png",units="in",height=2.75,width=8.5,res=600)
par(mfrow=c(1,4),tcl=-0.2,mgp=c(2,0.5,0),mar=c(2,2,2,1),oma=c(2,2,0,0))
plot1to1(1,"ARTR",doLegend=T)
plot1to1(2,"HECO")
plot1to1(3,"POSE")
plot1to1(4,"PSSP")
mtext(side=1,"Observed",line=0.5, outer=T)
mtext(side=2,"Predicted",line=0.5, outer=T)
dev.off()
matplot(obs.pgr.mean[1:5,3:6],pred.pgr.mean[1:5,3:6],type="p",pch=c(1,2,3,4))
matplot(obs.pgr.mean[1:5,3:6],pred.pgr.mean[1:5,3:6],type="p",pch=c(1,2,3,4))
dev.off()
dev.off()
matplot(obs.pgr.mean[1:5,3:6],pred.pgr.mean[1:5,3:6],type="p",pch=c(1,2,3,4))
par(mfrow=c(1,2))
matplot(obs.pgr.mean[1:5,3:6],pred.pgr.mean[1:5,3:6],type="p",pch=c(1,2,3,4))
abline(0,1)
matplot(obs.pgr.mean[6:10,3:6],pred.pgr.mean[6:10,3:6],type="p",pch=c(1,2,3,4))
abline(0,1)
par(mfrow=c(1,2))
matplot(obs.pgr.mean[1:5,3:6],pred.pgr.mean[1:5,3:6],type="p",pch=c(1,2,3,4),pty="s")
abline(0,1)
matplot(obs.pgr.mean[6:10,3:6],pred.pgr.mean[6:10,3:6],type="p",pch=c(1,2,3,4),pty="s")
abline(0,1)
myCols=c("black","dodgerblue4","red3","darkgrey")
myLims=c(-1.5,1.5)
par(mfrow=c(1,2))
matplot(obs.pgr.mean[1:5,3:6],pred.pgr.mean[1:5,3:6],ylims=myLims,xlims=myLims,
xlab="",ylab="",
type="p",pch=c(1),col=myCols,pty="s")
abline(0,1)
matplot(obs.pgr.mean[6:10,3:6],pred.pgr.mean[6:10,3:6],ylims=myLims,xlims=myLims,
xlab="",ylab="",
type="p",pch=c(1),col=myCols,pty="s")
abline(0,1)
myCols=c("black","dodgerblue4","red3","darkgrey")
myLims=c(-1.5,1.5)
par(mfrow=c(1,2))
matplot(obs.pgr.mean[1:5,3:6],pred.pgr.mean[1:5,3:6],ylim=myLims,xlim=myLims,
xlab="",ylab="",
type="p",pch=c(1),col=myCols,pty="s")
abline(0,1)
matplot(obs.pgr.mean[6:10,3:6],pred.pgr.mean[6:10,3:6],ylim=myLims,xlim=myLims,
xlab="",ylab="",
type="p",pch=c(1),col=myCols,pty="s")
abline(0,1)
myCols=c("black","dodgerblue3","red3","darkgrey")
myLims=c(-1.5,1.5)
par(mfrow=c(1,2))
matplot(obs.pgr.mean[1:5,3:6],pred.pgr.mean[1:5,3:6],ylim=myLims,xlim=myLims,
xlab="",ylab="",
type="p",pch=c(16),col=myCols,pty="s")
abline(0,1)
matplot(obs.pgr.mean[6:10,3:6],pred.pgr.mean[6:10,3:6],ylim=myLims,xlim=myLims,
xlab="",ylab="",
type="p",pch=c(16),col=myCols,pty="s")
abline(0,1)
myCols=c("black","dodgerblue3","red3","darkgrey")
myLims=c(-1.5,1.5)
par(mfrow=c(1,2))
matplot(obs.pgr.mean[1:5,3:6],pred.pgr.mean[1:5,3:6],ylim=myLims,xlim=myLims,
xlab="",ylab="",
type="p",pch=c(16),col=myCols,pty="s")
abline(0,1)
matplot(obs.pgr.mean[6:10,3:6],pred.pgr.mean[6:10,3:6],ylim=myLims,xlim=myLims,
xlab="",ylab="",
type="p",pch=c(16),col=myCols,pty="s")
abline(0,1)
mtext(side=1,"Observed",outer=T)
mtext(side=1,"Predicted",outer=T)
?mtext
myCols=c("black","dodgerblue3","red3","darkgrey")
myLims=c(-1.5,1.5)
par(mfrow=c(1,2))
matplot(obs.pgr.mean[1:5,3:6],pred.pgr.mean[1:5,3:6],ylim=myLims,xlim=myLims,
xlab="",ylab="",
type="p",pch=c(16),col=myCols,pty="s")
abline(0,1)
matplot(obs.pgr.mean[6:10,3:6],pred.pgr.mean[6:10,3:6],ylim=myLims,xlim=myLims,
xlab="",ylab="",
type="p",pch=c(16),col=myCols,pty="s")
abline(0,1)
mtext("Observed",side=1,outer=T)
mtext("Predicted",side=2,outer=T)
myCols=c("black","dodgerblue3","red3","darkgrey")
myLims=c(-1.5,1.5)
par(mfrow=c(1,2),tcl=-0.2,mgp=c(2,0.5,0),mar=c(2,2,2,1),oma=c(2,2,0,0))
matplot(obs.pgr.mean[1:5,3:6],pred.pgr.mean[1:5,3:6],ylim=myLims,xlim=myLims,
xlab="",ylab="",
type="p",pch=c(16),col=myCols,pty="s")
abline(0,1)
matplot(obs.pgr.mean[6:10,3:6],pred.pgr.mean[6:10,3:6],ylim=myLims,xlim=myLims,
xlab="",ylab="",
type="p",pch=c(16),col=myCols,pty="s")
abline(0,1)
mtext("Observed",side=1,outer=T,line=0.5)
mtext("Predicted",side=2,outer=T,line=0.5)
sppList
myCols=c("black","dodgerblue3","red3","darkgrey")
myLims=c(-1.5,1.5)
par(mfrow=c(1,2),tcl=-0.2,mgp=c(2,0.5,0),mar=c(2,2,2,1),oma=c(2,2,0,0))
matplot(obs.pgr.mean[1:5,3:6],pred.pgr.mean[1:5,3:6],ylim=myLims,xlim=myLims,
xlab="",ylab="",
type="p",pch=c(16),col=myCols,pty="s")
abline(0,1)
legend("topleft",sppList,pch=1,col=myCols,bty="n")
matplot(obs.pgr.mean[6:10,3:6],pred.pgr.mean[6:10,3:6],ylim=myLims,xlim=myLims,
xlab="",ylab="",
type="p",pch=c(16),col=myCols,pty="s")
abline(0,1)
mtext("Observed",side=1,outer=T,line=0.5)
mtext("Predicted",side=2,outer=T,line=0.5)
myCols=c("black","dodgerblue3","red3","darkgrey")
myLims=c(-1.5,1.5)
par(mfrow=c(1,2),tcl=-0.2,mgp=c(2,0.5,0),mar=c(2,2,2,1),oma=c(2,2,0,0))
matplot(obs.pgr.mean[1:5,3:6],pred.pgr.mean[1:5,3:6],ylim=myLims,xlim=myLims,
xlab="",ylab="",
type="p",pch=c(16),col=myCols,pty="s")
abline(0,1)
legend("topleft",sppList,pch=16,col=myCols,bty="n")
matplot(obs.pgr.mean[6:10,3:6],pred.pgr.mean[6:10,3:6],ylim=myLims,xlim=myLims,
xlab="",ylab="",
type="p",pch=c(16),col=myCols,pty="s")
abline(0,1)
mtext("Observed",side=1,outer=T,line=0.5)
mtext("Predicted",side=2,outer=T,line=0.5)
myCols=c("black","dodgerblue3","red3","darkgrey")
myLims=c(-1.5,1.5)
par(mfrow=c(1,2),tcl=-0.2,mgp=c(2,0.5,0),mar=c(2,2,2,1),oma=c(2,2,0,0))
matplot(obs.pgr.mean[1:5,3:6],pred.pgr.mean[1:5,3:6],ylim=myLims,xlim=myLims,
xlab="",ylab="",
type="p",pch=c(16),col=myCols,pty="s")
abline(0,1)
legend("topleft",sppList,pch=16,col=myCols,bty="n")
matplot(obs.pgr.mean[6:10,3:6],pred.pgr.mean[6:10,3:6],ylim=myLims,xlim=myLims,
xlab="",ylab="",
type="p",pch=c(16),col=myCols,pty="s")
abline(0,1)
mtext("Observed",side=1,outer=T,line=0.5,cex=1.2)
mtext("Predicted",side=2,outer=T,line=0.5,cex=1.2)
myCols=c("black","dodgerblue3","red3","darkgrey")
myLims=c(-1.5,1.5)
par(mfrow=c(1,2),tcl=-0.2,mgp=c(2,0.5,0),mar=c(2,2,2,1),oma=c(2,2,0,0))
matplot(obs.pgr.mean[1:5,3:6],pred.pgr.mean[1:5,3:6],ylim=myLims,xlim=myLims,
xlab="",ylab="",
type="p",pch=c(16),col=myCols,pty="s")
abline(0,1)
mtext("(A)",side=3,adj=0)
legend("topleft",sppList,pch=16,col=myCols,bty="n")
matplot(obs.pgr.mean[6:10,3:6],pred.pgr.mean[6:10,3:6],ylim=myLims,xlim=myLims,
xlab="",ylab="",
type="p",pch=c(16),col=myCols,pty="s")
abline(0,1)
mtext("Observed",side=1,outer=T,line=0.5,cex=1.2)
mtext("Predicted",side=2,outer=T,line=0.5,cex=1.2)
myCols=c("black","dodgerblue3","red3","darkgrey")
myLims=c(-1.5,1.5)
par(mfrow=c(1,2),tcl=-0.2,mgp=c(2,0.5,0),mar=c(2,2,2,1),oma=c(2,2,0,0))
matplot(obs.pgr.mean[1:5,3:6],pred.pgr.mean[1:5,3:6],ylim=myLims,xlim=myLims,
xlab="",ylab="",
type="p",pch=c(16),col=myCols,pty="s")
abline(0,1)
mtext("(A)",side=3,adj=0,line=0.5)
legend("topleft",sppList,pch=16,col=myCols,bty="n")
matplot(obs.pgr.mean[6:10,3:6],pred.pgr.mean[6:10,3:6],ylim=myLims,xlim=myLims,
xlab="",ylab="",
type="p",pch=c(16),col=myCols,pty="s")
abline(0,1)
mtext("(B)",side=3,adj=0lin3=0.5)
mtext("Observed",side=1,outer=T,line=0.5,cex=1.2)
mtext("Predicted",side=2,outer=T,line=0.5,cex=1.2)
myCols=c("black","dodgerblue3","red3","darkgrey")
myLims=c(-1.5,1.5)
par(mfrow=c(1,2),tcl=-0.2,mgp=c(2,0.5,0),mar=c(2,2,2,1),oma=c(2,2,0,0))
matplot(obs.pgr.mean[1:5,3:6],pred.pgr.mean[1:5,3:6],ylim=myLims,xlim=myLims,
xlab="",ylab="",
type="p",pch=c(16),col=myCols,pty="s")
abline(0,1)
mtext("(A)",side=3,adj=0,line=0.5)
legend("topleft",sppList,pch=16,col=myCols,bty="n")
matplot(obs.pgr.mean[6:10,3:6],pred.pgr.mean[6:10,3:6],ylim=myLims,xlim=myLims,
xlab="",ylab="",
type="p",pch=c(16),col=myCols,pty="s")
points(obs.pgr.mean[6:10,3:6],pred.trt.pgr.mean[6:10,3:6],ylim=myLims,xlim=myLims,
xlab="",ylab="",
type="p",pch=1,col=myCols,pty="s")
abline(0,1)
mtext("(B)",side=3,adj=0, line=0.5)
mtext("Observed",side=1,outer=T,line=0.5,cex=1.2)
mtext("Predicted",side=2,outer=T,line=0.5,cex=1.2)
###
### plot observations vs predictions 1:1
###
myCols=c("black","dodgerblue3","red3","darkgrey")
myLims=c(-1.5,1.5)
par(mfrow=c(1,2),tcl=-0.2,mgp=c(2,0.5,0),mar=c(2,2,2,1),oma=c(2,2,0,0))
matplot(obs.pgr.mean[1:5,3:6],pred.pgr.mean[1:5,3:6],ylim=myLims,xlim=myLims,
xlab="",ylab="",
type="p",pch=c(16),col=myCols,pty="s")
abline(0,1)
mtext("(A)",side=3,adj=0,line=0.5)
legend("topleft",sppList,pch=16,col=myCols,bty="n")
matplot(obs.pgr.mean[6:10,3:6],pred.pgr.mean[6:10,3:6],ylim=myLims,xlim=myLims,
xlab="",ylab="",
type="p",pch=c(16),col=myCols,pty="s")
for(i in 1:4){
points(obs.pgr.mean[6:10,2+i],pred.trt.pgr.mean[6:10,2+i],pch=1,col=myCols[i])
}
abline(0,1)
mtext("(B)",side=3,adj=0, line=0.5)
mtext("Observed",side=1,outer=T,line=0.5,cex=1.2)
mtext("Predicted",side=2,outer=T,line=0.5,cex=1.2)
###
### plot observations vs predictions 1:1
###
myCols=c("black","dodgerblue3","red3","darkgrey")
myLims=c(-1.5,1.5)
par(mfrow=c(1,2),tcl=-0.2,mgp=c(2,0.5,0),mar=c(2,2,2,1),oma=c(2,2,0,0))
matplot(obs.pgr.mean[1:5,3:6],pred.pgr.mean[1:5,3:6],ylim=myLims,xlim=myLims,
xlab="",ylab="",
type="p",pch=c(16),col=myCols,pty="s")
abline(0,1)
mtext("(A)",side=3,adj=0,line=0.5)
legend("topleft",sppNames,pch=16,col=myCols,bty="n")
matplot(obs.pgr.mean[6:10,3:6],pred.pgr.mean[6:10,3:6],ylim=myLims,xlim=myLims,
xlab="",ylab="",
type="p",pch=c(16),col=myCols,pty="s")
for(i in 1:4){
points(obs.pgr.mean[6:10,2+i],pred.trt.pgr.mean[6:10,2+i],pch=1,col=myCols[i])
}
abline(0,1)
mtext("(B)",side=3,adj=0, line=0.5)
mtext("Observed",side=1,outer=T,line=0.5,cex=1.2)
mtext("Predicted",side=2,outer=T,line=0.5,cex=1.2)
###
### plot observations vs predictions 1:1
###
myCols=c("black","dodgerblue3","firebrick","darkorange")
myLims=c(-1.5,1.5)
par(mfrow=c(1,2),tcl=-0.2,mgp=c(2,0.5,0),mar=c(2,2,2,1),oma=c(2,2,0,0))
matplot(obs.pgr.mean[1:5,3:6],pred.pgr.mean[1:5,3:6],ylim=myLims,xlim=myLims,
xlab="",ylab="",
type="p",pch=c(16),col=myCols,pty="s")
abline(0,1)
mtext("(A)",side=3,adj=0,line=0.5)
legend("topleft",sppNames,pch=16,col=myCols,bty="n")
matplot(obs.pgr.mean[6:10,3:6],pred.pgr.mean[6:10,3:6],ylim=myLims,xlim=myLims,
xlab="",ylab="",
type="p",pch=c(16),col=myCols,pty="s")
for(i in 1:4){
points(obs.pgr.mean[6:10,2+i],pred.trt.pgr.mean[6:10,2+i],pch=1,col=myCols[i])
}
abline(0,1)
mtext("(B)",side=3,adj=0, line=0.5)
mtext("Observed",side=1,outer=T,line=0.5,cex=1.2)
mtext("Predicted",side=2,outer=T,line=0.5,cex=1.2)
source('C:/Repos/ExperimentTests/removals/ibm/summarize_sims1step.r', echo=TRUE)
getwd()
setwd("..")
source('C:/Repos/ExperimentTests/removals/ibm/summarize_sims1step.r', echo=TRUE)
source('C:/Repos/ExperimentTests/removals/ibm/summarize_sims1step.r', echo=TRUE)
source('C:/Repos/ExperimentTests/removals/ibm/summarize_sims1step.r', echo=TRUE)
source('C:/Repos/ExperimentTests/removals/ibm/summarize_sims1step.r', echo=TRUE)
source('C:/Repos/ExperimentTests/removals/ibm/summarize_sims1step.r', echo=TRUE)
plot(1:19,pch=0:18)
source('C:/Repos/ExperimentTests/removals/ibm/summarize_sims1step.r', echo=TRUE)
warnings()
source('C:/Repos/ExperimentTests/removals/ibm/summarize_sims1step.r', echo=TRUE)
warnings()
source('C:/Repos/ExperimentTests/removals/ibm/summarize_sims1step.r', echo=TRUE)
source('C:/Repos/ExperimentTests/removals/ibm/summarize_sims1step.r', echo=TRUE)
covMeans
i=1
matplot(covMeans$year[1:6],cbind(covMeans[1:6,2+i],covMeans[1:6,6+i], # control plots
covMeans[doRows,2+i],covMeans[doRows,6+i],covMeans[doRows,10+i]),
xlab="",ylab="",type="o",
col=c(color1,color2,color1,color2,color3),xaxt="n",
pch=c(15,15,0,0,0), cex=1.1,
lty=c("solid","dotted","solid","dotted","dotted"))   # removal plots
covMeans$year
is.factor(covMeans$year)
plot(covMeans$year,covMeans$obs.ARTR)
source('C:/Repos/ExperimentTests/removals/ibm/summarize_sims1step.r', echo=TRUE)
#----------------------------------------
# 1. Simulate a species by quadrats matrix
#----------------------------------------
# should composition be random or patchy?
random<-F
# set up quadrats
quads<-1:50
# assign environmental value to each quadrat
env.q<-(quads-0.5)*2
# set up species pool
species<-1:100
# set up quads x species matrix
composition<-matrix(0,length(quads),length(species))
# define function to calculate probability of species occurrence
assignSpp<-function(species,environment){
if(random==T){
p<-0.1
}else{
envDiff<-abs(species-environment)
p<-(100-envDiff^2)/100
p[p<0]<-0
p<-p*0.8 #reduce probabilities of occurrence
}
out<-rbinom(length(species),1,p)
out
}
# populate the matrix
for(q in 1:length(quads)){
composition[q,]<-assignSpp(species,env.q[q])
}
image(composition)
#----------------------------------------
# 1. Simulate a species by quadrats matrix
#----------------------------------------
# should composition be random or patchy?
random<-T
# set up quadrats
quads<-1:50
# assign environmental value to each quadrat
env.q<-(quads-0.5)*2
# set up species pool
species<-1:100
# set up quads x species matrix
composition<-matrix(0,length(quads),length(species))
# define function to calculate probability of species occurrence
assignSpp<-function(species,environment){
if(random==T){
p<-0.1
}else{
envDiff<-abs(species-environment)
p<-(100-envDiff^2)/100
p[p<0]<-0
p<-p*0.8 #reduce probabilities of occurrence
}
out<-rbinom(length(species),1,p)
out
}
# populate the matrix
for(q in 1:length(quads)){
composition[q,]<-assignSpp(species,env.q[q])
}
image(composition)
#----------------------------------------
# 1. Simulate a species by quadrats matrix
#----------------------------------------
# should composition be random or patchy?
random<-F
# set up quadrats
quads<-1:50
# assign environmental value to each quadrat
env.q<-(quads-1)*2
# set up species pool
species<-1:100
# set up quads x species matrix
composition<-matrix(0,length(quads),length(species))
# define function to calculate probability of species occurrence
assignSpp<-function(species,environment){
if(random==T){
p<-0.1
}else{
envDiff<-abs(species-environment)
p<-(100-envDiff^2)/100
p[p<0]<-0
p<-p*0.8 #reduce probabilities of occurrence
}
out<-rbinom(length(species),1,p)
out
}
# populate the matrix
for(q in 1:length(quads)){
composition[q,]<-assignSpp(species,env.q[q])
}
image(composition)
#----------------------------------------
# 1. Simulate a species by quadrats matrix
#----------------------------------------
# should composition be random or patchy?
random<-F
# set up quadrats
quads<-1:50
# assign environmental value to each quadrat
env.q<-(quads-0.25)*2
# set up species pool
species<-1:100
# set up quads x species matrix
composition<-matrix(0,length(quads),length(species))
# define function to calculate probability of species occurrence
assignSpp<-function(species,environment){
if(random==T){
p<-0.1
}else{
envDiff<-abs(species-environment)
p<-(100-envDiff^2)/100
p[p<0]<-0
p<-p*0.8 #reduce probabilities of occurrence
}
out<-rbinom(length(species),1,p)
out
}
# populate the matrix
for(q in 1:length(quads)){
composition[q,]<-assignSpp(species,env.q[q])
}
image(composition)
#----------------------------------------
# 1. Simulate a species by quadrats matrix
#----------------------------------------
# should composition be random or patchy?
random<-F
# set up quadrats
quads<-1:50
# assign environmental value to each quadrat
env.q<-(quads-0.05)*2
# set up species pool
species<-1:100
# set up quads x species matrix
composition<-matrix(0,length(quads),length(species))
# define function to calculate probability of species occurrence
assignSpp<-function(species,environment){
if(random==T){
p<-0.1
}else{
envDiff<-abs(species-environment)
p<-(100-envDiff^2)/100
p[p<0]<-0
p<-p*0.8 #reduce probabilities of occurrence
}
out<-rbinom(length(species),1,p)
out
}
# populate the matrix
for(q in 1:length(quads)){
composition[q,]<-assignSpp(species,env.q[q])
}
image(composition)
env.q
env.q<-(quads-0.25)*2
env.q
source('F:/rarefactionVSsar-demo.r', echo=TRUE)
par(mfrow=c(1,1))
source('F:/rarefactionVSsar-demo.r', echo=TRUE)
