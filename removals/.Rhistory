init.plants=data.frame(NULL)
lastID=0
for(i in 1:length(sppList)){
infile=paste("c:\\repos\\driversdata\\data\\idaho_modern\\speciesData\\",sppList[i],"\\",sppList[i],"_genet_xy.csv",sep="")
tmpD=read.csv(infile)
tmpD=subset(tmpD,quad==qName & tmpD$year>=startYr)
if(dim(tmpD)[1]>0){
obsCov=aggregate(tmpD$area,by=list(tmpD$year),FUN=sum)
names(obsCov)=c("year",sppList[i])
obsA=merge(obsA,obsCov,all.x=T)
obsDen=aggregate(rep(1,dim(tmpD)[1]),by=list(tmpD$year),FUN=sum)
names(obsDen)=c("year",sppList[i])
obsN=merge(obsN,obsDen,all.x=T)
tmpD2=subset(tmpD,year==startYr)
if(dim(tmpD2)[1]>0 & !is.element(sppList[i],removeSpp)){  # don't include removal spp in inits
spp=rep(i,dim(tmpD2)[1])
id=(lastID+1:length(spp))
tmpD2=data.frame(cbind(spp,tmpD2[,c("area","x","y")],id))
names(tmpD2)=c("spp","size","x","y","id")
init.plants=rbind(init.plants,tmpD2)
lastID=max(init.plants[,5])
}
}
}
rm(tmpD)
# add in missing species, set NAs to zero (since no missing yrs, should be no "false" zeros)
tmp=which(!is.element(sppList,names(obsA)))
tmp.df=matrix(0,dim(obsA)[1],length(tmp))
colnames(tmp.df)=sppList[tmp]
obsA <- cbind(obsA,tmp.df)
obsA <- obsA[,c("year",sppList)]
obsA[is.na(obsA)] <- 0
obsN <- cbind(obsN,tmp.df)
obsN <- obsN[,c("year",sppList)]
obsN[is.na(obsN)] <- 0
# FORMAT PARAMETERS ------------------------------------------------
Nspp=length(sppList)
curDir <- getwd()
Nyrs <- 30
# set up survival parameters and function
source("survival/import2ibm_deterministic.r")
# set up growth parameters and function
source("growth/import2ibm_deterministic.r")
# set up recruitment parameters and function
source("recruitment/import2ibm_deterministic.r")
setwd(curDir)
# model spatial group variation (or not)
if(!is.na(doGroup)){
Spars$intcpt=Spars$intcpt+Spars$intcpt.gr[doGroup,]
Gpars$intcpt=Gpars$intcpt+Gpars$intcpt.gr[doGroup,]
Rpars$intcpt.yr=Rpars$intcpt.yr+matrix(Rpars$intcpt.gr[doGroup,],Nyrs,Nspp,byrow=T)
}
# FUNCTIONS---------------------------------------------------------
library(boot)
library(mvtnorm)
library(msm)
getCrowding=function(plants,alpha,L,expand){
# plants is a matrix: species ID in column 1, sizes in column 2; x,y coords in columns 3 and 4
# d is the distance weighting parameter
# functions returns a vector of length = rows in plants
if(dim(plants)[1]>1){
# pairwise distances
xdiff=abs(outer(plants[,3],plants[,3],FUN="-"))
ydiff=abs(outer(plants[,4],plants[,4],FUN="-"))
distMat=sqrt(xdiff^2+ydiff^2)
distMat[distMat==0]=NA
# apply distance weights
for(spp.index in 1:4){
doRows <- which(plants[,1]==spp.index)
if(length(doRows)==1){
distMat[doRows,]  <- Wfuns[[spp.index]](distMat[doRows,])
}else{
distMat[doRows,] <- t(apply(distMat[doRows,],MARGIN=1,FUN=Wfuns[[spp.index]]))
}
}
# weight by size
sizeMat=matrix(plants[,2],dim(plants)[1],dim(plants)[1])
out=aggregate(distMat*sizeMat,by=list("spp"=plants[,1]),FUN=sum,na.rm=T)
# put in missing zeros
tmp=data.frame("spp"=c(1:length(sppList)))
out=merge(out,tmp,all.y=T)
out[is.na(out)]=0
out=out[order(out$spp),]
out=as.matrix(out[,c(2:NCOL(out))])  # drop spp column
}else{
out=rep(0,Nspp)
}
out
}
# MAIN LOOP -------------------------------------------------------
calYrList=2011:2014
doYrList=which(is.element(Spars$yrList,calYrList))
simYrs=length(doYrList)
bigA=array(NA,dim=c((simYrs+1),Nspp,totSims))
bigN=array(NA,dim=c((simYrs+1),Nspp,totSims))
for(iSim in 1:totSims){
# initialize with N.init plants of size.init for each species
plants=init.plants
lastID=max(plants[,5])
# arrays to store results
N=matrix(0,(simYrs+1),Nspp)
N[1,1:4]=as.numeric(obsN[1,2:5])
A=matrix(0,(simYrs+1),Nspp)
A[1,1:4]=as.numeric(obsA[1,2:5])
# plot initial conditions
par(mgp=c(2,0.5,0),tcl=-0.2)
symbols(x = plants[,3], y = plants[,4], circles = sqrt(plants[,2]/pi),fg=myCol[plants[,1]],
xlim=c(0,L*expand),ylim=c(0,L*expand),main ="Time=1",xlab="x",ylab="y",inches=F,lwd=2)
for(tt in 1:simYrs){
# draw year effects
doYr=doYrList[tt]
nextplants=plants
# recruitment
newplants=recruit(Rpars,sizes=plants[,2],spp=plants[,1],doGroup=doGroup,doYear=doYr,lastID=lastID,L,expand)
for(ss in 1:Nspp){
if(N[tt,ss]>0){ # make sure spp ss is not extinct
# growth
W=getCrowding(plants,Gpars$alpha[ss,],L,expand)
newsizes=grow(Gpars,doSpp=ss,doGroup=doGroup,doYear=doYr,sizes=plants[,2],crowding=W)
if(sum(newsizes==Inf)>0) browser()
if(is.na(sum(newsizes))) browser()
# survival
# uses same W as growth
live=survive(Spars,doSpp=ss,doGroup=doGroup,doYear=doYr,sizes=plants[,2],crowding=W)
# put it all together
tmp=which(plants[,1]==ss)  # only alter plants of focal spp
nextplants[tmp,2]=newsizes[tmp]*live[tmp]   #update with G and S
} # end if no plants
} # next ss
nextplants=nextplants[nextplants[,2]>0,]    # remove dead plants
nextplants=rbind(nextplants,newplants)     # add recruits
if(dim(nextplants)[1]==0) break()  # end simulation
# output cover and density
tmp=aggregate(nextplants[,2],by=list(nextplants[,1]),FUN=sum)
A[tt+1,tmp[,1]]=tmp[,2]
tmp=aggregate(rep(1,dim(nextplants)[1]),by=list(nextplants[,1]),FUN=sum)
N[tt+1,tmp[,1]]=tmp[,2]
plants=nextplants
lastID=max(plants[,5])
# plot
if(sum(N[tt,])>0){
symbols(x = plants[,3], y = plants[,4], circles = sqrt(plants[,2]/pi),fg=myCol[plants[,1]],
xlim=c(0,L*expand),ylim=c(0,L*expand),main =paste("Time=",tt,sep=""),
xlab="x",ylab="y",inches=F,lwd=2)
}else{
break
}
print(tt);flush.console()
} # next tt
bigN[,,iSim]=N ; bigA[,,iSim]=A
print(paste("Sim ",iSim," complete",sep=""))
flush.console()
} # next iSim
# average across simulations
predA=apply(bigA,MARGIN=c(1,2),FUN=mean,na.rm=T)
predN=apply(bigN,MARGIN=c(1,2),FUN=mean)
year=c(calYrList[1],1+calYrList)
predA=data.frame(cbind(year,predA))
names(predA)[2:dim(predA)[2]]=paste(sppList,"pred",sep="")
output1=merge(obsA,predA,all.x=T)
predN=data.frame(cbind(year,predN))
names(predN)[2:dim(predN)[2]]=paste(sppList,"pred",sep="")
output2=merge(obsN,predN,all.x=T)
output1
rm(list=ls(all=TRUE))
graphics.off();
root=ifelse(.Platform$OS.type=="windows","c:/Repos","~/repos"); # modify as needed
setwd(paste(root,"/ExperimentTests/removals/",sep="")); # modify as needed
source('C:/Repos/ExperimentTests/removals/removal_analysis_wrapper.r', echo=TRUE)
# 4. get IBM predictions for quadrat cover ###############################
sppList <-  c("ARTR","HECO","POSE","PSSP")
source("validate/get_W_functions.r")  # get neighbor distance decay functions
# do control plots
quadList <- paste0("Q",c(1:6,19:26))
removeSpp <- NULL
trtEffects <- FALSE  # TRUE means use a model that includes removal treatment effects
for(iQuad in quadList){
qName=iQuad
doGroup=1
source("validate/ibm_validate_removal.r")
source("validate/ibm_validate_removal_1step.r")
}
# do no grass plots
quadList <- c("Q48","Q49","Q51","Q55","Q57","Q58","Q60","Q62")  # no grass
removeSpp <- c("HECO","POSE","PSSP")
for(iQuad in quadList){
qName=iQuad
doGroup=1
trtEffects <- FALSE
source("validate/ibm_validate_removal.r")
source("validate/ibm_validate_removal_1step.r")
trtEffects <- TRUE
source("validate/ibm_validate_removal.r")
source("validate/ibm_validate_removal_1step.r")
}
# do no shrub plots
quadList <- c("Q47","Q50","Q52","Q53","Q54","Q56","Q59","Q61")  # no shrub
removeSpp <- c("ARTR")
for(iQuad in quadList){
qName=iQuad
doGroup=1
trtEffects <- FALSE
source("validate/ibm_validate_removal.r")
source("validate/ibm_validate_removal_1step.r")
trtEffects <- TRUE
source("validate/ibm_validate_removal.r")
source("validate/ibm_validate_removal_1step.r")
}
# make figure for simulation results
source("validate/summarize_validate_sims1step.r")
getwd()
rm(list=ls(all=TRUE))
graphics.off();
root=ifelse(.Platform$OS.type=="windows","c:/Repos","~/repos"); # modify as needed
setwd(paste(root,"/ExperimentTests/removals/",sep="")); # modify as needed
# 4. get IBM predictions for quadrat cover ###############################
sppList <-  c("ARTR","HECO","POSE","PSSP")
source("validate/get_W_functions.r")  # get neighbor distance decay functions
# do control plots
quadList <- paste0("Q",c(1:6,19:26))
removeSpp <- NULL
trtEffects <- FALSE  # TRUE means use a model that includes removal treatment effects
for(iQuad in quadList){
qName=iQuad
doGroup=1
source("validate/ibm_validate_removal.r")
source("validate/ibm_validate_removal_1step.r")
}
# do no grass plots
quadList <- c("Q48","Q49","Q51","Q55","Q57","Q58","Q60","Q62")  # no grass
removeSpp <- c("HECO","POSE","PSSP")
for(iQuad in quadList){
qName=iQuad
doGroup=1
trtEffects <- FALSE
source("validate/ibm_validate_removal.r")
source("validate/ibm_validate_removal_1step.r")
trtEffects <- TRUE
source("validate/ibm_validate_removal.r")
source("validate/ibm_validate_removal_1step.r")
}
# do no shrub plots
quadList <- c("Q47","Q50","Q52","Q53","Q54","Q56","Q59","Q61")  # no shrub
removeSpp <- c("ARTR")
for(iQuad in quadList){
qName=iQuad
doGroup=1
trtEffects <- FALSE
source("validate/ibm_validate_removal.r")
source("validate/ibm_validate_removal_1step.r")
trtEffects <- TRUE
source("validate/ibm_validate_removal.r")
source("validate/ibm_validate_removal_1step.r")
}
# make figure for simulation results
source("validate/summarize_validate_sims1step.r")
source('C:/Repos/ExperimentTests/removals/validate/summarize_validate_sims.r', echo=TRUE)
source('C:/Repos/ExperimentTests/removals/validate/summarize_validate_sims.r', echo=TRUE)
source('C:/Repos/ExperimentTests/removals/validate/summarize_validate_sims1step.r', echo=TRUE)
plot1to1 <- function(doSpp,controlD,removalD,removalTRTD,mytitle){
#tmp <- rbind(controlD[,2:NCOL(controlD)],removalD[,2:NCOL(removalD)],removalTRTD[,2:NCOL(removalTRTD)])
#mylims <- c(0.95*min(tmp,na.rm=T),1.05*max(tmp,na.rm=T))
mylims <- c(-2,2)
plot(controlD[,1+doSpp],controlD[,5+doSpp],xlim=mylims,ylim=mylims,
xlab="Observed",ylab="Predicted",pch=21,bg="dodgerblue3")
points(removalD[,1+doSpp],removalD[,5+doSpp],pch=22,bg="red3")
points(removalTRTD[,1+doSpp],removalTRTD[,5+doSpp],pch=24,bg="red3")
abline(0,1)
abline(h=0,lty="dotted",col="grey")
abline(v=0,lty="dotted",col="grey")
title(main=mytitle,adj=0,font.main=1)
}
png("obsVSpred1to1.png",units="in",height=2.75,width=8.5,res=600)
par(mfrow=c(1,4),tcl=-0.2,mgp=c(2,0.5,0),mar=c(2,2,2,1),oma=c(2,2,0,0))
plot1to1(1,control.mean,nograss.mean,nograssTRT.mean,"ARTR")
legend("topleft",c("Control","Removal","Removal effects"),pch=c(21,22,24),
pt.bg=c("dodgerblue3","red3","red3"),bty="n")
plot1to1(2,control.mean,noshrub.mean,noshrubTRT.mean,"HECO")
plot1to1(3,control.mean,noshrub.mean,noshrubTRT.mean,"POSE")
plot1to1(4,control.mean,noshrub.mean,noshrubTRT.mean,"PSSP")
mtext(side=1,"Observed",line=0.5, outer=T)
mtext(side=2,"Predicted",line=0.5, outer=T)
dev.off()
source('C:/Repos/ExperimentTests/removals/validate/summarize_validate_sims1step.r', echo=TRUE)
source('C:/Repos/ExperimentTests/removals/validate/summarize_validate_sims1step.r', echo=TRUE)
source('C:/Repos/ExperimentTests/removals/validate/summarize_validate_sims1step.r', echo=TRUE)
source('C:/Repos/ExperimentTests/removals/validate/summarize_validate_sims1step.r', echo=TRUE)
source('C:/Repos/ExperimentTests/removals/validate/summarize_validate_sims1step.r', echo=TRUE)
source('C:/Repos/ExperimentTests/removals/validate/summarize_validate_sims1step.r', echo=TRUE)
source('C:/Repos/ExperimentTests/removals/validate/summarize_validate_sims1step.r', echo=TRUE)
setwd("..")
source('C:/Repos/ExperimentTests/removals/validate/summarize_validate_sims1step.r', echo=TRUE)
source('C:/Repos/ExperimentTests/removals/validate/summarize_validate_sims1step.r', echo=TRUE)
source('C:/Repos/ExperimentTests/removals/validate/summarize_validate_sims1step.r', echo=TRUE)
source('C:/Repos/ExperimentTests/removals/validate/summarize_validate_sims1step.r', echo=TRUE)
source('C:/Repos/ExperimentTests/removals/validate/summarize_validate_sims1step.r', echo=TRUE)
# call from validate wrapper
setwd("validate/")
sppList=c("ARTR","HECO","POSE","PSSP")
Nspp=length(sppList)
sppNames=c("A. tripartita","H. comata","Poa secunda","P. spicata")
myCol=c("black","forestgreen","blue","red")
# function to load observed and predicted cover
getSims<-function(qList,trtEffects){
out=NULL
for(i in qList){
if(trtEffects==F){
infile=paste("simulations1step/",i,"_validation_cov_removals_noTrt.csv",sep="")
}else{
infile=paste("simulations1step/",i,"_validation_cov_removals_Trt.csv",sep="")
}
tmpD=read.csv(infile)
rbind(out,tmpD)
}
return(out)
}
# function to load data and calculate log(cover_t+1 / cover_t)
getPopGrowth<-function(qList,trtEffects){
out=NULL
for(i in qList){
if(trtEffects==F){
infile=paste("simulations1step/",i,"_validation_cov_removals_noTrt.csv",sep="")
}else{
infile=paste("simulations1step/",i,"_validation_cov_removals_Trt.csv",sep="")
}
tmpD=read.csv(infile)
# make sure that the denominator (t0) is always the observed cover, not predicted cover
change=data.frame(year=tmpD$year[1:(NROW(tmpD)-1)],
log(tmpD[2:NROW(tmpD),2:NCOL(tmpD)]/cbind(tmpD[1:(NROW(tmpD)-1),2:5],tmpD[1:(NROW(tmpD)-1),2:5])))
change[change==Inf]<-NA; change[change==-Inf]<-NA
out=rbind(out,change)
}
return(out)
}
# control plots
qList <- paste0("Q",c(1:6,19:26)) #c("Q1","Q2","Q3","Q4","Q5","Q6" )
quadD <- getSims(qList,trtEffects=F)
quadD
# call from validate wrapper
setwd("validate/")
sppList=c("ARTR","HECO","POSE","PSSP")
Nspp=length(sppList)
sppNames=c("A. tripartita","H. comata","Poa secunda","P. spicata")
myCol=c("black","forestgreen","blue","red")
# function to load observed and predicted cover
getSims<-function(qList,trtEffects){
out=NULL
for(i in qList){
if(trtEffects==F){
infile=paste("simulations1step/",i,"_validation_cov_removals_noTrt.csv",sep="")
}else{
infile=paste("simulations1step/",i,"_validation_cov_removals_Trt.csv",sep="")
}
tmpD=read.csv(infile)
out <- rbind(out,tmpD)
}
return(out)
}
# function to load data and calculate log(cover_t+1 / cover_t)
getPopGrowth<-function(qList,trtEffects){
out=NULL
for(i in qList){
if(trtEffects==F){
infile=paste("simulations1step/",i,"_validation_cov_removals_noTrt.csv",sep="")
}else{
infile=paste("simulations1step/",i,"_validation_cov_removals_Trt.csv",sep="")
}
tmpD=read.csv(infile)
# make sure that the denominator (t0) is always the observed cover, not predicted cover
change=data.frame(year=tmpD$year[1:(NROW(tmpD)-1)],
log(tmpD[2:NROW(tmpD),2:NCOL(tmpD)]/cbind(tmpD[1:(NROW(tmpD)-1),2:5],tmpD[1:(NROW(tmpD)-1),2:5])))
change[change==Inf]<-NA; change[change==-Inf]<-NA
out=rbind(out,change)
}
return(out)
}
# control plots
qList <- paste0("Q",c(1:6,19:26)) #c("Q1","Q2","Q3","Q4","Q5","Q6" )
quadD <- getSims(qList,trtEffects=F)
quadD
qList <- paste0("Q",c(1:6,19:26)) #c("Q1","Q2","Q3","Q4","Q5","Q6" )
quadD <- getSims(qList,trtEffects=F)
control.cov=aggregate(quadD[,2:NCOL(quadD)],by=list(year=quadD$year),FUN=mean,na.rm=T)
quadD <- getPopGrowth(qList,trtEffects=F)
control.pgr=aggregate(quadD[,2:NCOL(quadD)],by=list(year=quadD$year),FUN=mean,na.rm=T)
#control.sd=aggregate(quadD[,2:NCOL(quadD)],by=list(year=quadD$year),FUN=sd,na.rm=T)
control.cov
control.pgr
source('C:/Repos/ExperimentTests/removals/validate/summarize_validate_sims1step.r', echo=TRUE)
setwd("..")
source('C:/Repos/ExperimentTests/removals/validate/summarize_validate_sims1step.r', echo=TRUE)
source('C:/Repos/ExperimentTests/removals/validate/summarize_validate_sims1step.r', echo=TRUE)
plotTimeSeries<-function(doSpp,mydata1,mydata2,mydata3,mytitle){
# format data
newD=data.frame(mydata1$year,mydata1[,1+doSpp],mydata1[,5+doSpp],  # control obs and pred
mydata2[,1+doSpp],mydata2[,5+doSpp], # removal obs and pred (no TRT effect)
mydata3[,5+doSpp])                               # removal pred (with TRT effect)
names(newD)=c("year","control.obs","control.pred","remove.obs","remove.pred","remove.predTRT")
matplot(newD$year,newD[,2:6]/100,type="o",xlab="",ylab="",
col=c(rep("black",2),rep("blue",3)),
pch=c(16,1,16,1,2),
lty=c("solid","dashed","solid","dashed","dashed"))
title(main=mytitle,adj=0,font.main=1)
}
png("obsVSpred_project1step.png",units="in",height=3.5,width=8.5,res=600)
par(mfrow=c(1,4),tcl=-0.2,mgp=c(2,0.5,0),mar=c(2,2,2,1),oma=c(2,2,0,0))
plotTimeSeries(1,control.cov,nograss.cov,nograssTRT.cov,"ARTR")
plotTimeSeries(2,control.cov,noshrub.cov,noshrubTRT.cov,"HECO")
plotTimeSeries(3,control.cov,noshrub.cov,noshrubTRT.cov,"POSE")
plotTimeSeries(4,control.cov,noshrub.cov,noshrubTRT.cov,"PSSP")
mtext(side=1,"Year",line=0.5, outer=T)
mtext(side=2,"Mean cover (%)",line=0.5, outer=T)
dev.off()
getwd()
plotTimeSeries<-function(doSpp,mydata1,mydata2,mydata3,mytitle){
# format data
newD=data.frame(mydata1$year,mydata1[,1+doSpp],mydata1[,5+doSpp],  # control obs and pred
mydata2[,1+doSpp],mydata2[,5+doSpp], # removal obs and pred (no TRT effect)
mydata3[,5+doSpp])                               # removal pred (with TRT effect)
names(newD)=c("year","control.obs","control.pred","remove.obs","remove.pred","remove.predTRT")
matplot(newD$year,newD[,2:6]/100,type="p",xlab="",ylab="",
col=c(rep("black",2),rep("blue",3)),
pch=c(16,1,16,1,2),
lty=c("solid","dashed","solid","dashed","dashed"))
title(main=mytitle,adj=0,font.main=1)
}
par(mfrow=c(1,4),tcl=-0.2,mgp=c(2,0.5,0),mar=c(2,2,2,1),oma=c(2,2,0,0))
plotTimeSeries(1,control.cov,nograss.cov,nograssTRT.cov,"ARTR")
plotTimeSeries(2,control.cov,noshrub.cov,noshrubTRT.cov,"HECO")
plotTimeSeries(3,control.cov,noshrub.cov,noshrubTRT.cov,"POSE")
plotTimeSeries(4,control.cov,noshrub.cov,noshrubTRT.cov,"PSSP")
mtext(side=1,"Year",line=0.5, outer=T)
mtext(side=2,"Mean cover (%)",line=0.5, outer=T)
?segments
plotTimeSeries<-function(doSpp,mydata1,mydata2,mydata3,mytitle){
# format data
newD=data.frame(mydata1$year,mydata1[,1+doSpp],mydata1[,5+doSpp],  # control obs and pred
mydata2[,1+doSpp],mydata2[,5+doSpp], # removal obs and pred (no TRT effect)
mydata3[,5+doSpp])                               # removal pred (with TRT effect)
names(newD)=c("year","control.obs","control.pred","remove.obs","remove.pred","remove.predTRT")
matplot(newD$year,newD[,2:6]/100,type="p",xlab="",ylab="",
col=c(rep("black",2),rep("blue",3)),
pch=c(16,1,16,1,2),
lty=c("solid","blank","solid","blank","blank"))
#line segments for controls
segments(x0=mydata1$year[1:4],y0=mydata1[1:4,1+doSpp],
x1=mydata1$year[2:5],y1=mydata1[2:5,5+doSpp], col="black",lty="dashed")
title(main=mytitle,adj=0,font.main=1)
}
plotTimeSeries(1,control.cov,nograss.cov,nograssTRT.cov,"ARTR")
mydata1=control.cov
mydata2=nograss.cov
mydata3=nograssTRT.cov
newD=data.frame(mydata1$year,mydata1[,1+doSpp],mydata1[,5+doSpp],  # control obs and pred
mydata2[,1+doSpp],mydata2[,5+doSpp], # removal obs and pred (no TRT effect)
mydata3[,5+doSpp])                               # removal pred (with TRT effect)
names(newD)=c("year","control.obs","control.pred","remove.obs","remove.pred","remove.predTRT")
doSpp=1
newD=data.frame(mydata1$year,mydata1[,1+doSpp],mydata1[,5+doSpp],  # control obs and pred
mydata2[,1+doSpp],mydata2[,5+doSpp], # removal obs and pred (no TRT effect)
mydata3[,5+doSpp])                               # removal pred (with TRT effect)
names(newD)=c("year","control.obs","control.pred","remove.obs","remove.pred","remove.predTRT")
newD
matplot(newD$year,newD[,2:6]/100,type="p",xlab="",ylab="",
col=c(rep("black",2),rep("blue",3)),
pch=c(16,1,16,1,2),
lty=c("solid","blank","solid","blank","blank"))
#line segments for controls
segments(x0=newD$year[1:4],y0=newD$control.obs[1:4],
x1=newD$year[2:5],y1=newD$control.pred[2:5], col="black",lty="dashed")
title(main=mytitle,adj=0,font.main=1)
par(mfrow=c(1,1))
matplot(newD$year,newD[,2:6]/100,type="p",xlab="",ylab="",
col=c(rep("black",2),rep("blue",3)),
pch=c(16,1,16,1,2),
lty=c("solid","blank","solid","blank","blank"))
segments(x0=newD$year[1:4],y0=newD$control.obs[1:4],
x1=newD$year[2:5],y1=newD$control.pred[2:5], col="black",lty="dashed")
newD
segments(x0=newD$year[1:4],y0=newD$control.obs[1:4]/100,
x1=newD$year[2:5],y1=newD$control.pred[2:5]/100,col="black",lty="dashed")
segments(x0=newD$year[1:4],y0=newD$remove.obs[1:4]/100,
x1=newD$year[2:5],y1=newD$remove.pred[2:5]/100,col="blue",lty="dashed")
source('C:/Repos/ExperimentTests/removals/validate/summarize_validate_sims1step.r', echo=TRUE)
plotTimeSeries(1,control.cov,nograss.cov,nograssTRT.cov,"ARTR")
plotTimeSeries<-function(doSpp,mydata1,mydata2,mydata3,mytitle){
# choose colors
col1="dodgerblue3"
col2="red3"
# format data
newD=data.frame(mydata1$year,mydata1[,1+doSpp],mydata1[,5+doSpp],  # control obs and pred
mydata2[,1+doSpp],mydata2[,5+doSpp], # removal obs and pred (no TRT effect)
mydata3[,5+doSpp])                               # removal pred (with TRT effect)
names(newD)=c("year","control.obs","control.pred","remove.obs","remove.pred","remove.predTRT")
matplot(newD$year,newD[,2:6]/100,type="l",xlab="",ylab="",
col=c(rep(col1,2),rep(col2,3)),
pch=c(16,1,16,1,2),
lty=c("solid","blank","solid","blank","blank"))
#line segments for controls
segments(x0=newD$year[1:4],y0=newD$control.obs[1:4]/100,
x1=newD$year[2:5],y1=newD$control.pred[2:5]/100,col=col1,lty="dashed")
#line segments for removals, no TRT
segments(x0=newD$year[1:4],y0=newD$remove.obs[1:4]/100,
x1=newD$year[2:5],y1=newD$remove.pred[2:5]/100,col=col2,lty="dashed")
#line segments for removals, no TRT
segments(x0=newD$year[1:4],y0=newD$remove.obs[1:4]/100,
x1=newD$year[2:5],y1=newD$remove.predTRT[2:5]/100,col=col2,lty="dashed")
title(main=mytitle,adj=0,font.main=1)
}
plotTimeSeries(1,control.cov,nograss.cov,nograssTRT.cov,"ARTR")
source('C:/Repos/ExperimentTests/removals/validate/summarize_validate_sims1step.r', echo=TRUE)
source('C:/Repos/ExperimentTests/removals/validate/summarize_validate_sims1step.r', echo=TRUE)
